# Generated from Tokenize.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,42,303,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,
        1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,11,
        1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,
        1,13,1,14,4,14,125,8,14,11,14,12,14,126,1,14,1,14,1,15,1,15,1,15,
        1,15,5,15,135,8,15,10,15,12,15,138,9,15,1,15,3,15,141,8,15,1,15,
        1,15,1,15,1,15,5,15,147,8,15,10,15,12,15,150,9,15,1,15,1,15,3,15,
        154,8,15,1,15,1,15,1,16,4,16,159,8,16,11,16,12,16,160,1,17,4,17,
        164,8,17,11,17,12,17,165,1,17,1,17,1,17,1,17,1,17,1,17,3,17,174,
        8,17,1,18,4,18,177,8,18,11,18,12,18,178,1,18,1,18,4,18,183,8,18,
        11,18,12,18,184,1,18,3,18,188,8,18,1,19,1,19,1,19,1,19,1,19,1,19,
        1,19,1,19,3,19,198,8,19,1,20,1,20,1,20,3,20,203,8,20,1,20,1,20,1,
        21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,214,8,21,1,22,1,22,1,22,1,
        22,1,22,1,22,1,22,1,22,1,22,3,22,225,8,22,1,23,1,23,5,23,229,8,23,
        10,23,12,23,232,9,23,1,23,1,23,1,24,1,24,1,24,1,24,1,25,1,25,1,25,
        1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,27,
        1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,
        1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,31,1,31,
        1,32,1,32,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,
        1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,41,1,41,2,136,148,0,42,1,1,
        3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,
        29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,
        51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,
        73,37,75,38,77,39,79,40,81,41,83,42,1,0,9,3,0,9,10,13,13,32,32,1,
        1,10,10,4,0,48,57,65,90,95,95,97,122,1,0,48,57,2,0,115,115,121,121,
        2,0,76,76,117,117,2,0,102,102,109,109,4,0,9,10,13,13,32,32,46,46,
        3,0,48,57,65,90,97,122,322,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,
        7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
        1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
        1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
        1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,
        1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,
        1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,
        1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,
        1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,1,85,1,0,0,0,3,87,
        1,0,0,0,5,89,1,0,0,0,7,91,1,0,0,0,9,93,1,0,0,0,11,95,1,0,0,0,13,
        97,1,0,0,0,15,99,1,0,0,0,17,101,1,0,0,0,19,103,1,0,0,0,21,105,1,
        0,0,0,23,108,1,0,0,0,25,113,1,0,0,0,27,118,1,0,0,0,29,124,1,0,0,
        0,31,153,1,0,0,0,33,158,1,0,0,0,35,163,1,0,0,0,37,176,1,0,0,0,39,
        197,1,0,0,0,41,199,1,0,0,0,43,213,1,0,0,0,45,224,1,0,0,0,47,226,
        1,0,0,0,49,235,1,0,0,0,51,239,1,0,0,0,53,246,1,0,0,0,55,254,1,0,
        0,0,57,263,1,0,0,0,59,271,1,0,0,0,61,275,1,0,0,0,63,279,1,0,0,0,
        65,281,1,0,0,0,67,283,1,0,0,0,69,285,1,0,0,0,71,288,1,0,0,0,73,290,
        1,0,0,0,75,292,1,0,0,0,77,294,1,0,0,0,79,296,1,0,0,0,81,299,1,0,
        0,0,83,301,1,0,0,0,85,86,5,46,0,0,86,2,1,0,0,0,87,88,5,34,0,0,88,
        4,1,0,0,0,89,90,5,123,0,0,90,6,1,0,0,0,91,92,5,125,0,0,92,8,1,0,
        0,0,93,94,5,91,0,0,94,10,1,0,0,0,95,96,5,60,0,0,96,12,1,0,0,0,97,
        98,5,62,0,0,98,14,1,0,0,0,99,100,5,93,0,0,100,16,1,0,0,0,101,102,
        5,40,0,0,102,18,1,0,0,0,103,104,5,41,0,0,104,20,1,0,0,0,105,106,
        5,105,0,0,106,107,5,102,0,0,107,22,1,0,0,0,108,109,5,116,0,0,109,
        110,5,104,0,0,110,111,5,101,0,0,111,112,5,110,0,0,112,24,1,0,0,0,
        113,114,5,101,0,0,114,115,5,108,0,0,115,116,5,105,0,0,116,117,5,
        102,0,0,117,26,1,0,0,0,118,119,5,101,0,0,119,120,5,108,0,0,120,121,
        5,115,0,0,121,122,5,101,0,0,122,28,1,0,0,0,123,125,7,0,0,0,124,123,
        1,0,0,0,125,126,1,0,0,0,126,124,1,0,0,0,126,127,1,0,0,0,127,128,
        1,0,0,0,128,129,6,14,0,0,129,30,1,0,0,0,130,131,5,47,0,0,131,132,
        5,47,0,0,132,136,1,0,0,0,133,135,9,0,0,0,134,133,1,0,0,0,135,138,
        1,0,0,0,136,137,1,0,0,0,136,134,1,0,0,0,137,140,1,0,0,0,138,136,
        1,0,0,0,139,141,7,1,0,0,140,139,1,0,0,0,141,154,1,0,0,0,142,143,
        5,40,0,0,143,144,5,42,0,0,144,148,1,0,0,0,145,147,9,0,0,0,146,145,
        1,0,0,0,147,150,1,0,0,0,148,149,1,0,0,0,148,146,1,0,0,0,149,151,
        1,0,0,0,150,148,1,0,0,0,151,152,5,42,0,0,152,154,5,41,0,0,153,130,
        1,0,0,0,153,142,1,0,0,0,154,155,1,0,0,0,155,156,6,15,0,0,156,32,
        1,0,0,0,157,159,7,2,0,0,158,157,1,0,0,0,159,160,1,0,0,0,160,158,
        1,0,0,0,160,161,1,0,0,0,161,34,1,0,0,0,162,164,7,3,0,0,163,162,1,
        0,0,0,164,165,1,0,0,0,165,163,1,0,0,0,165,166,1,0,0,0,166,173,1,
        0,0,0,167,168,5,117,0,0,168,174,5,121,0,0,169,174,7,4,0,0,170,171,
        5,117,0,0,171,174,5,115,0,0,172,174,7,5,0,0,173,167,1,0,0,0,173,
        169,1,0,0,0,173,170,1,0,0,0,173,172,1,0,0,0,173,174,1,0,0,0,174,
        36,1,0,0,0,175,177,7,3,0,0,176,175,1,0,0,0,177,178,1,0,0,0,178,176,
        1,0,0,0,178,179,1,0,0,0,179,180,1,0,0,0,180,182,5,46,0,0,181,183,
        7,3,0,0,182,181,1,0,0,0,183,184,1,0,0,0,184,182,1,0,0,0,184,185,
        1,0,0,0,185,187,1,0,0,0,186,188,7,6,0,0,187,186,1,0,0,0,187,188,
        1,0,0,0,188,38,1,0,0,0,189,190,5,37,0,0,190,198,5,115,0,0,191,192,
        5,37,0,0,192,198,5,100,0,0,193,194,5,37,0,0,194,198,5,102,0,0,195,
        196,5,37,0,0,196,198,5,99,0,0,197,189,1,0,0,0,197,191,1,0,0,0,197,
        193,1,0,0,0,197,195,1,0,0,0,198,40,1,0,0,0,199,202,5,39,0,0,200,
        203,3,43,21,0,201,203,8,7,0,0,202,200,1,0,0,0,202,201,1,0,0,0,203,
        204,1,0,0,0,204,205,5,39,0,0,205,42,1,0,0,0,206,207,5,92,0,0,207,
        208,7,3,0,0,208,214,6,21,1,0,209,210,5,92,0,0,210,211,5,117,0,0,
        211,212,7,8,0,0,212,214,6,21,2,0,213,206,1,0,0,0,213,209,1,0,0,0,
        214,44,1,0,0,0,215,216,5,116,0,0,216,217,5,114,0,0,217,218,5,117,
        0,0,218,225,5,101,0,0,219,220,5,102,0,0,220,221,5,97,0,0,221,222,
        5,108,0,0,222,223,5,115,0,0,223,225,5,101,0,0,224,215,1,0,0,0,224,
        219,1,0,0,0,225,46,1,0,0,0,226,230,5,40,0,0,227,229,5,32,0,0,228,
        227,1,0,0,0,229,232,1,0,0,0,230,228,1,0,0,0,230,231,1,0,0,0,231,
        233,1,0,0,0,232,230,1,0,0,0,233,234,5,41,0,0,234,48,1,0,0,0,235,
        236,5,114,0,0,236,237,5,101,0,0,237,238,5,99,0,0,238,50,1,0,0,0,
        239,240,5,112,0,0,240,241,5,117,0,0,241,242,5,98,0,0,242,243,5,108,
        0,0,243,244,5,105,0,0,244,245,5,99,0,0,245,52,1,0,0,0,246,247,5,
        112,0,0,247,248,5,114,0,0,248,249,5,105,0,0,249,250,5,118,0,0,250,
        251,5,97,0,0,251,252,5,116,0,0,252,253,5,101,0,0,253,54,1,0,0,0,
        254,255,5,105,0,0,255,256,5,110,0,0,256,257,5,116,0,0,257,258,5,
        101,0,0,258,259,5,114,0,0,259,260,5,110,0,0,260,261,5,97,0,0,261,
        262,5,108,0,0,262,56,1,0,0,0,263,264,5,109,0,0,264,265,5,117,0,0,
        265,266,5,116,0,0,266,267,5,97,0,0,267,268,5,98,0,0,268,269,5,108,
        0,0,269,270,5,101,0,0,270,58,1,0,0,0,271,272,5,108,0,0,272,273,5,
        101,0,0,273,274,5,116,0,0,274,60,1,0,0,0,275,276,5,102,0,0,276,277,
        5,117,0,0,277,278,5,110,0,0,278,62,1,0,0,0,279,280,5,36,0,0,280,
        64,1,0,0,0,281,282,5,58,0,0,282,66,1,0,0,0,283,284,5,95,0,0,284,
        68,1,0,0,0,285,286,5,45,0,0,286,287,5,62,0,0,287,70,1,0,0,0,288,
        289,5,43,0,0,289,72,1,0,0,0,290,291,5,45,0,0,291,74,1,0,0,0,292,
        293,5,42,0,0,293,76,1,0,0,0,294,295,5,47,0,0,295,78,1,0,0,0,296,
        297,5,42,0,0,297,298,5,42,0,0,298,80,1,0,0,0,299,300,5,37,0,0,300,
        82,1,0,0,0,301,302,5,61,0,0,302,84,1,0,0,0,17,0,126,136,140,148,
        153,160,165,173,178,184,187,197,202,213,224,230,3,6,0,0,1,21,0,1,
        21,1
    ]

class TokenizeLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    WHITE_SPACE = 15
    COMMENT = 16
    IDENTIFIER = 17
    INT = 18
    FLOAT = 19
    INTERPOLATIONSIGN = 20
    CHAR = 21
    ESC = 22
    BOOL = 23
    UNIT = 24
    REC = 25
    PUBLIC = 26
    PRIVATE = 27
    INTERNAL = 28
    MUTABLE = 29
    LET = 30
    FUN = 31
    DOLLAR = 32
    COLON = 33
    MISSING_ARG = 34
    RIGHT_ARROW = 35
    ADD = 36
    MINUS = 37
    MUL = 38
    DIV = 39
    POW = 40
    MOD = 41
    EQUAL = 42

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'.'", "'\"'", "'{'", "'}'", "'['", "'<'", "'>'", "']'", "'('", 
            "')'", "'if'", "'then'", "'elif'", "'else'", "'rec'", "'public'", 
            "'private'", "'internal'", "'mutable'", "'let'", "'fun'", "'$'", 
            "':'", "'_'", "'->'", "'+'", "'-'", "'*'", "'/'", "'**'", "'%'", 
            "'='" ]

    symbolicNames = [ "<INVALID>",
            "WHITE_SPACE", "COMMENT", "IDENTIFIER", "INT", "FLOAT", "INTERPOLATIONSIGN", 
            "CHAR", "ESC", "BOOL", "UNIT", "REC", "PUBLIC", "PRIVATE", "INTERNAL", 
            "MUTABLE", "LET", "FUN", "DOLLAR", "COLON", "MISSING_ARG", "RIGHT_ARROW", 
            "ADD", "MINUS", "MUL", "DIV", "POW", "MOD", "EQUAL" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "WHITE_SPACE", "COMMENT", "IDENTIFIER", "INT", "FLOAT", 
                  "INTERPOLATIONSIGN", "CHAR", "ESC", "BOOL", "UNIT", "REC", 
                  "PUBLIC", "PRIVATE", "INTERNAL", "MUTABLE", "LET", "FUN", 
                  "DOLLAR", "COLON", "MISSING_ARG", "RIGHT_ARROW", "ADD", 
                  "MINUS", "MUL", "DIV", "POW", "MOD", "EQUAL" ]

    grammarFileName = "Tokenize.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[21] = self.ESC_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def ESC_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            3
     

        if actionIndex == 1:
            4
     


