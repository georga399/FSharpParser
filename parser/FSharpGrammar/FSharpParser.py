# Generated from FSharpParser.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,106,859,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,1,0,1,0,1,1,1,1,1,1,1,1,5,1,191,8,1,10,1,12,1,194,9,1,1,2,1,2,
        1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,3,10,
        213,8,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,5,10,222,8,10,10,10,
        12,10,225,9,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,
        4,12,237,8,12,11,12,12,12,238,1,12,1,12,1,13,1,13,1,14,1,14,1,15,
        1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,4,19,257,8,19,11,19,
        12,19,258,1,19,1,19,1,19,1,20,1,20,1,20,4,20,267,8,20,11,20,12,20,
        268,1,21,1,21,1,21,3,21,274,8,21,1,22,1,22,4,22,278,8,22,11,22,12,
        22,279,1,22,1,22,4,22,284,8,22,11,22,12,22,285,1,22,1,22,4,22,290,
        8,22,11,22,12,22,291,1,22,1,22,4,22,296,8,22,11,22,12,22,297,5,22,
        300,8,22,10,22,12,22,303,9,22,1,22,1,22,3,22,307,8,22,1,23,1,23,
        4,23,311,8,23,11,23,12,23,312,1,23,1,23,1,24,1,24,4,24,319,8,24,
        11,24,12,24,320,1,24,1,24,4,24,325,8,24,11,24,12,24,326,1,24,1,24,
        1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,
        1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,
        1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,
        1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,4,49,381,
        8,49,11,49,12,49,382,1,49,1,49,1,50,1,50,1,51,1,51,1,51,1,52,1,52,
        1,53,1,53,4,53,396,8,53,11,53,12,53,397,1,53,1,53,1,54,1,54,1,55,
        1,55,1,55,1,56,1,56,1,56,4,56,410,8,56,11,56,12,56,411,1,56,1,56,
        4,56,416,8,56,11,56,12,56,417,5,56,420,8,56,10,56,12,56,423,9,56,
        1,56,1,56,1,57,1,57,4,57,429,8,57,11,57,12,57,430,1,57,1,57,4,57,
        435,8,57,11,57,12,57,436,5,57,439,8,57,10,57,12,57,442,9,57,1,57,
        1,57,1,58,1,58,1,58,4,58,449,8,58,11,58,12,58,450,1,58,1,58,4,58,
        455,8,58,11,58,12,58,456,5,58,459,8,58,10,58,12,58,462,9,58,1,58,
        1,58,1,58,1,59,1,59,1,59,4,59,470,8,59,11,59,12,59,471,1,59,1,59,
        4,59,476,8,59,11,59,12,59,477,1,59,1,59,4,59,482,8,59,11,59,12,59,
        483,1,59,1,59,4,59,488,8,59,11,59,12,59,489,5,59,492,8,59,10,59,
        12,59,495,9,59,1,59,1,59,1,60,1,60,1,60,1,60,1,60,3,60,504,8,60,
        1,61,1,61,1,61,1,62,1,62,1,62,5,62,512,8,62,10,62,12,62,515,9,62,
        1,62,1,62,1,63,1,63,1,63,5,63,522,8,63,10,63,12,63,525,9,63,1,63,
        1,63,1,64,1,64,1,65,1,65,4,65,533,8,65,11,65,12,65,534,1,65,1,65,
        1,65,4,65,540,8,65,11,65,12,65,541,1,65,1,65,4,65,546,8,65,11,65,
        12,65,547,4,65,550,8,65,11,65,12,65,551,1,66,1,66,5,66,556,8,66,
        10,66,12,66,559,9,66,1,66,1,66,1,66,5,66,564,8,66,10,66,12,66,567,
        9,66,1,66,1,66,5,66,571,8,66,10,66,12,66,574,9,66,5,66,576,8,66,
        10,66,12,66,579,9,66,3,66,581,8,66,1,66,1,66,3,66,585,8,66,1,67,
        1,67,5,67,589,8,67,10,67,12,67,592,9,67,1,67,1,67,1,67,1,68,1,68,
        1,68,1,68,1,69,1,69,1,70,1,70,1,71,1,71,1,72,1,72,1,73,1,73,5,73,
        611,8,73,10,73,12,73,614,9,73,1,73,1,73,1,73,1,74,1,74,1,74,1,74,
        4,74,623,8,74,11,74,12,74,624,1,74,1,74,1,74,1,75,1,75,3,75,632,
        8,75,1,75,1,75,1,75,3,75,637,8,75,1,75,1,75,1,75,1,75,1,76,1,76,
        5,76,645,8,76,10,76,12,76,648,9,76,1,76,1,76,1,77,1,77,1,77,1,77,
        3,77,656,8,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,3,77,
        667,8,77,1,77,1,77,5,77,671,8,77,10,77,12,77,674,9,77,1,77,1,77,
        3,77,678,8,77,1,77,1,77,1,77,1,77,3,77,684,8,77,1,77,5,77,687,8,
        77,10,77,12,77,690,9,77,1,77,1,77,3,77,694,8,77,1,78,1,78,1,78,1,
        78,4,78,700,8,78,11,78,12,78,701,1,78,1,78,1,79,1,79,1,80,1,80,1,
        80,1,80,1,80,5,80,713,8,80,10,80,12,80,716,9,80,1,80,5,80,719,8,
        80,10,80,12,80,722,9,80,1,80,1,80,5,80,726,8,80,10,80,12,80,729,
        9,80,3,80,731,8,80,1,80,1,80,1,81,1,81,1,82,1,82,1,82,1,82,3,82,
        741,8,82,1,82,1,82,4,82,745,8,82,11,82,12,82,746,1,83,1,83,1,84,
        1,84,1,85,1,85,1,86,1,86,1,87,1,87,1,88,1,88,1,89,1,89,1,90,1,90,
        1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,
        1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,
        1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,
        1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,
        1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,
        1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,
        1,90,1,90,1,90,1,90,1,90,1,90,3,90,849,8,90,1,91,5,91,852,8,91,10,
        91,12,91,855,9,91,1,91,1,91,1,91,0,0,92,0,2,4,6,8,10,12,14,16,18,
        20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,
        64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,
        106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,
        138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,
        170,172,174,176,178,180,182,0,3,1,0,20,22,1,0,3,4,2,0,43,43,69,69,
        927,0,184,1,0,0,0,2,186,1,0,0,0,4,195,1,0,0,0,6,197,1,0,0,0,8,199,
        1,0,0,0,10,201,1,0,0,0,12,203,1,0,0,0,14,205,1,0,0,0,16,207,1,0,
        0,0,18,209,1,0,0,0,20,212,1,0,0,0,22,228,1,0,0,0,24,234,1,0,0,0,
        26,242,1,0,0,0,28,244,1,0,0,0,30,246,1,0,0,0,32,248,1,0,0,0,34,250,
        1,0,0,0,36,252,1,0,0,0,38,254,1,0,0,0,40,263,1,0,0,0,42,270,1,0,
        0,0,44,275,1,0,0,0,46,308,1,0,0,0,48,316,1,0,0,0,50,330,1,0,0,0,
        52,332,1,0,0,0,54,334,1,0,0,0,56,336,1,0,0,0,58,338,1,0,0,0,60,340,
        1,0,0,0,62,342,1,0,0,0,64,344,1,0,0,0,66,346,1,0,0,0,68,348,1,0,
        0,0,70,350,1,0,0,0,72,352,1,0,0,0,74,354,1,0,0,0,76,356,1,0,0,0,
        78,358,1,0,0,0,80,360,1,0,0,0,82,362,1,0,0,0,84,364,1,0,0,0,86,366,
        1,0,0,0,88,368,1,0,0,0,90,370,1,0,0,0,92,372,1,0,0,0,94,374,1,0,
        0,0,96,376,1,0,0,0,98,378,1,0,0,0,100,386,1,0,0,0,102,388,1,0,0,
        0,104,391,1,0,0,0,106,393,1,0,0,0,108,401,1,0,0,0,110,403,1,0,0,
        0,112,406,1,0,0,0,114,426,1,0,0,0,116,445,1,0,0,0,118,466,1,0,0,
        0,120,498,1,0,0,0,122,505,1,0,0,0,124,508,1,0,0,0,126,518,1,0,0,
        0,128,528,1,0,0,0,130,530,1,0,0,0,132,553,1,0,0,0,134,586,1,0,0,
        0,136,596,1,0,0,0,138,600,1,0,0,0,140,602,1,0,0,0,142,604,1,0,0,
        0,144,606,1,0,0,0,146,608,1,0,0,0,148,618,1,0,0,0,150,629,1,0,0,
        0,152,642,1,0,0,0,154,693,1,0,0,0,156,695,1,0,0,0,158,705,1,0,0,
        0,160,707,1,0,0,0,162,734,1,0,0,0,164,744,1,0,0,0,166,748,1,0,0,
        0,168,750,1,0,0,0,170,752,1,0,0,0,172,754,1,0,0,0,174,756,1,0,0,
        0,176,758,1,0,0,0,178,760,1,0,0,0,180,848,1,0,0,0,182,853,1,0,0,
        0,184,185,5,61,0,0,185,1,1,0,0,0,186,192,5,106,0,0,187,188,3,0,0,
        0,188,189,5,106,0,0,189,191,1,0,0,0,190,187,1,0,0,0,191,194,1,0,
        0,0,192,190,1,0,0,0,192,193,1,0,0,0,193,3,1,0,0,0,194,192,1,0,0,
        0,195,196,5,3,0,0,196,5,1,0,0,0,197,198,5,4,0,0,198,7,1,0,0,0,199,
        200,5,9,0,0,200,9,1,0,0,0,201,202,5,8,0,0,202,11,1,0,0,0,203,204,
        5,6,0,0,204,13,1,0,0,0,205,206,5,69,0,0,206,15,1,0,0,0,207,208,5,
        5,0,0,208,17,1,0,0,0,209,210,5,23,0,0,210,19,1,0,0,0,211,213,3,18,
        9,0,212,211,1,0,0,0,212,213,1,0,0,0,213,214,1,0,0,0,214,223,5,100,
        0,0,215,216,5,96,0,0,216,217,3,180,90,0,217,218,5,97,0,0,218,222,
        1,0,0,0,219,222,3,16,8,0,220,222,5,6,0,0,221,215,1,0,0,0,221,219,
        1,0,0,0,221,220,1,0,0,0,222,225,1,0,0,0,223,221,1,0,0,0,223,224,
        1,0,0,0,224,226,1,0,0,0,225,223,1,0,0,0,226,227,5,100,0,0,227,21,
        1,0,0,0,228,229,5,98,0,0,229,230,5,80,0,0,230,231,3,2,1,0,231,232,
        5,81,0,0,232,233,5,99,0,0,233,23,1,0,0,0,234,236,5,94,0,0,235,237,
        3,180,90,0,236,235,1,0,0,0,237,238,1,0,0,0,238,236,1,0,0,0,238,239,
        1,0,0,0,239,240,1,0,0,0,240,241,5,95,0,0,241,25,1,0,0,0,242,243,
        5,10,0,0,243,27,1,0,0,0,244,245,5,11,0,0,245,29,1,0,0,0,246,247,
        5,12,0,0,247,31,1,0,0,0,248,249,5,13,0,0,249,33,1,0,0,0,250,251,
        5,14,0,0,251,35,1,0,0,0,252,253,5,15,0,0,253,37,1,0,0,0,254,256,
        5,16,0,0,255,257,3,180,90,0,256,255,1,0,0,0,257,258,1,0,0,0,258,
        256,1,0,0,0,258,259,1,0,0,0,259,260,1,0,0,0,260,261,5,70,0,0,261,
        262,3,180,90,0,262,39,1,0,0,0,263,266,3,2,1,0,264,265,5,70,0,0,265,
        267,3,2,1,0,266,264,1,0,0,0,267,268,1,0,0,0,268,266,1,0,0,0,268,
        269,1,0,0,0,269,41,1,0,0,0,270,273,5,66,0,0,271,274,3,24,12,0,272,
        274,3,2,1,0,273,271,1,0,0,0,273,272,1,0,0,0,274,43,1,0,0,0,275,277,
        5,101,0,0,276,278,3,180,90,0,277,276,1,0,0,0,278,279,1,0,0,0,279,
        277,1,0,0,0,279,280,1,0,0,0,280,281,1,0,0,0,281,283,5,42,0,0,282,
        284,3,180,90,0,283,282,1,0,0,0,284,285,1,0,0,0,285,283,1,0,0,0,285,
        286,1,0,0,0,286,301,1,0,0,0,287,289,5,102,0,0,288,290,3,180,90,0,
        289,288,1,0,0,0,290,291,1,0,0,0,291,289,1,0,0,0,291,292,1,0,0,0,
        292,293,1,0,0,0,293,295,5,42,0,0,294,296,3,180,90,0,295,294,1,0,
        0,0,296,297,1,0,0,0,297,295,1,0,0,0,297,298,1,0,0,0,298,300,1,0,
        0,0,299,287,1,0,0,0,300,303,1,0,0,0,301,299,1,0,0,0,301,302,1,0,
        0,0,302,306,1,0,0,0,303,301,1,0,0,0,304,305,5,103,0,0,305,307,3,
        180,90,0,306,304,1,0,0,0,306,307,1,0,0,0,307,45,1,0,0,0,308,310,
        5,17,0,0,309,311,3,180,90,0,310,309,1,0,0,0,311,312,1,0,0,0,312,
        310,1,0,0,0,312,313,1,0,0,0,313,314,1,0,0,0,314,315,5,18,0,0,315,
        47,1,0,0,0,316,318,5,19,0,0,317,319,3,180,90,0,318,317,1,0,0,0,319,
        320,1,0,0,0,320,318,1,0,0,0,320,321,1,0,0,0,321,322,1,0,0,0,322,
        324,7,0,0,0,323,325,3,180,90,0,324,323,1,0,0,0,325,326,1,0,0,0,326,
        324,1,0,0,0,326,327,1,0,0,0,327,328,1,0,0,0,328,329,5,18,0,0,329,
        49,1,0,0,0,330,331,5,72,0,0,331,51,1,0,0,0,332,333,5,74,0,0,333,
        53,1,0,0,0,334,335,5,75,0,0,335,55,1,0,0,0,336,337,5,73,0,0,337,
        57,1,0,0,0,338,339,5,76,0,0,339,59,1,0,0,0,340,341,5,77,0,0,341,
        61,1,0,0,0,342,343,5,79,0,0,343,63,1,0,0,0,344,345,5,80,0,0,345,
        65,1,0,0,0,346,347,5,82,0,0,347,67,1,0,0,0,348,349,5,81,0,0,349,
        69,1,0,0,0,350,351,5,83,0,0,351,71,1,0,0,0,352,353,5,78,0,0,353,
        73,1,0,0,0,354,355,5,84,0,0,355,75,1,0,0,0,356,357,5,85,0,0,357,
        77,1,0,0,0,358,359,5,86,0,0,359,79,1,0,0,0,360,361,5,87,0,0,361,
        81,1,0,0,0,362,363,5,88,0,0,363,83,1,0,0,0,364,365,5,89,0,0,365,
        85,1,0,0,0,366,367,5,90,0,0,367,87,1,0,0,0,368,369,5,91,0,0,369,
        89,1,0,0,0,370,371,5,92,0,0,371,91,1,0,0,0,372,373,5,68,0,0,373,
        93,1,0,0,0,374,375,5,71,0,0,375,95,1,0,0,0,376,377,5,67,0,0,377,
        97,1,0,0,0,378,380,5,24,0,0,379,381,3,180,90,0,380,379,1,0,0,0,381,
        382,1,0,0,0,382,380,1,0,0,0,382,383,1,0,0,0,383,384,1,0,0,0,384,
        385,5,78,0,0,385,99,1,0,0,0,386,387,5,25,0,0,387,101,1,0,0,0,388,
        389,5,26,0,0,389,390,3,2,1,0,390,103,1,0,0,0,391,392,5,27,0,0,392,
        105,1,0,0,0,393,395,5,28,0,0,394,396,3,180,90,0,395,394,1,0,0,0,
        396,397,1,0,0,0,397,395,1,0,0,0,397,398,1,0,0,0,398,399,1,0,0,0,
        399,400,5,29,0,0,400,107,1,0,0,0,401,402,5,18,0,0,402,109,1,0,0,
        0,403,404,5,41,0,0,404,405,3,180,90,0,405,111,1,0,0,0,406,407,5,
        45,0,0,407,409,5,96,0,0,408,410,3,180,90,0,409,408,1,0,0,0,410,411,
        1,0,0,0,411,409,1,0,0,0,411,412,1,0,0,0,412,421,1,0,0,0,413,415,
        5,65,0,0,414,416,3,180,90,0,415,414,1,0,0,0,416,417,1,0,0,0,417,
        415,1,0,0,0,417,418,1,0,0,0,418,420,1,0,0,0,419,413,1,0,0,0,420,
        423,1,0,0,0,421,419,1,0,0,0,421,422,1,0,0,0,422,424,1,0,0,0,423,
        421,1,0,0,0,424,425,5,97,0,0,425,113,1,0,0,0,426,428,5,98,0,0,427,
        429,3,180,90,0,428,427,1,0,0,0,429,430,1,0,0,0,430,428,1,0,0,0,430,
        431,1,0,0,0,431,440,1,0,0,0,432,434,5,65,0,0,433,435,3,180,90,0,
        434,433,1,0,0,0,435,436,1,0,0,0,436,434,1,0,0,0,436,437,1,0,0,0,
        437,439,1,0,0,0,438,432,1,0,0,0,439,442,1,0,0,0,440,438,1,0,0,0,
        440,441,1,0,0,0,441,443,1,0,0,0,442,440,1,0,0,0,443,444,5,99,0,0,
        444,115,1,0,0,0,445,446,5,98,0,0,446,448,5,104,0,0,447,449,3,180,
        90,0,448,447,1,0,0,0,449,450,1,0,0,0,450,448,1,0,0,0,450,451,1,0,
        0,0,451,460,1,0,0,0,452,454,5,65,0,0,453,455,3,180,90,0,454,453,
        1,0,0,0,455,456,1,0,0,0,456,454,1,0,0,0,456,457,1,0,0,0,457,459,
        1,0,0,0,458,452,1,0,0,0,459,462,1,0,0,0,460,458,1,0,0,0,460,461,
        1,0,0,0,461,463,1,0,0,0,462,460,1,0,0,0,463,464,5,104,0,0,464,465,
        5,99,0,0,465,117,1,0,0,0,466,467,5,46,0,0,467,469,5,98,0,0,468,470,
        3,180,90,0,469,468,1,0,0,0,470,471,1,0,0,0,471,469,1,0,0,0,471,472,
        1,0,0,0,472,473,1,0,0,0,473,475,5,64,0,0,474,476,3,180,90,0,475,
        474,1,0,0,0,476,477,1,0,0,0,477,475,1,0,0,0,477,478,1,0,0,0,478,
        493,1,0,0,0,479,481,5,65,0,0,480,482,3,180,90,0,481,480,1,0,0,0,
        482,483,1,0,0,0,483,481,1,0,0,0,483,484,1,0,0,0,484,485,1,0,0,0,
        485,487,5,64,0,0,486,488,3,180,90,0,487,486,1,0,0,0,488,489,1,0,
        0,0,489,487,1,0,0,0,489,490,1,0,0,0,490,492,1,0,0,0,491,479,1,0,
        0,0,492,495,1,0,0,0,493,491,1,0,0,0,493,494,1,0,0,0,494,496,1,0,
        0,0,495,493,1,0,0,0,496,497,5,99,0,0,497,119,1,0,0,0,498,499,7,1,
        0,0,499,500,5,62,0,0,500,503,7,1,0,0,501,502,5,62,0,0,502,504,7,
        1,0,0,503,501,1,0,0,0,503,504,1,0,0,0,504,121,1,0,0,0,505,506,5,
        47,0,0,506,507,3,180,90,0,507,123,1,0,0,0,508,509,5,39,0,0,509,513,
        5,96,0,0,510,512,3,180,90,0,511,510,1,0,0,0,512,515,1,0,0,0,513,
        511,1,0,0,0,513,514,1,0,0,0,514,516,1,0,0,0,515,513,1,0,0,0,516,
        517,5,97,0,0,517,125,1,0,0,0,518,519,5,40,0,0,519,523,5,96,0,0,520,
        522,3,180,90,0,521,520,1,0,0,0,522,525,1,0,0,0,523,521,1,0,0,0,523,
        524,1,0,0,0,524,526,1,0,0,0,525,523,1,0,0,0,526,527,5,97,0,0,527,
        127,1,0,0,0,528,529,5,63,0,0,529,129,1,0,0,0,530,532,5,55,0,0,531,
        533,3,180,90,0,532,531,1,0,0,0,533,534,1,0,0,0,534,532,1,0,0,0,534,
        535,1,0,0,0,535,536,1,0,0,0,536,549,5,56,0,0,537,539,5,104,0,0,538,
        540,3,180,90,0,539,538,1,0,0,0,540,541,1,0,0,0,541,539,1,0,0,0,541,
        542,1,0,0,0,542,543,1,0,0,0,543,545,5,70,0,0,544,546,3,180,90,0,
        545,544,1,0,0,0,546,547,1,0,0,0,547,545,1,0,0,0,547,548,1,0,0,0,
        548,550,1,0,0,0,549,537,1,0,0,0,550,551,1,0,0,0,551,549,1,0,0,0,
        551,552,1,0,0,0,552,131,1,0,0,0,553,557,5,53,0,0,554,556,3,180,90,
        0,555,554,1,0,0,0,556,559,1,0,0,0,557,555,1,0,0,0,557,558,1,0,0,
        0,558,580,1,0,0,0,559,557,1,0,0,0,560,577,5,56,0,0,561,565,5,104,
        0,0,562,564,3,180,90,0,563,562,1,0,0,0,564,567,1,0,0,0,565,563,1,
        0,0,0,565,566,1,0,0,0,566,568,1,0,0,0,567,565,1,0,0,0,568,572,5,
        70,0,0,569,571,3,180,90,0,570,569,1,0,0,0,571,574,1,0,0,0,572,570,
        1,0,0,0,572,573,1,0,0,0,573,576,1,0,0,0,574,572,1,0,0,0,575,561,
        1,0,0,0,576,579,1,0,0,0,577,575,1,0,0,0,577,578,1,0,0,0,578,581,
        1,0,0,0,579,577,1,0,0,0,580,560,1,0,0,0,580,581,1,0,0,0,581,584,
        1,0,0,0,582,583,5,54,0,0,583,585,3,180,90,0,584,582,1,0,0,0,584,
        585,1,0,0,0,585,133,1,0,0,0,586,590,5,57,0,0,587,589,3,180,90,0,
        588,587,1,0,0,0,589,592,1,0,0,0,590,588,1,0,0,0,590,591,1,0,0,0,
        591,593,1,0,0,0,592,590,1,0,0,0,593,594,5,78,0,0,594,595,3,180,90,
        0,595,135,1,0,0,0,596,597,5,58,0,0,597,598,3,24,12,0,598,599,3,180,
        90,0,599,137,1,0,0,0,600,601,5,48,0,0,601,139,1,0,0,0,602,603,5,
        49,0,0,603,141,1,0,0,0,604,605,5,50,0,0,605,143,1,0,0,0,606,607,
        5,51,0,0,607,145,1,0,0,0,608,612,5,59,0,0,609,611,3,180,90,0,610,
        609,1,0,0,0,611,614,1,0,0,0,612,610,1,0,0,0,612,613,1,0,0,0,613,
        615,1,0,0,0,614,612,1,0,0,0,615,616,5,60,0,0,616,617,3,180,90,0,
        617,147,1,0,0,0,618,619,5,44,0,0,619,620,7,2,0,0,620,622,3,0,0,0,
        621,623,3,2,1,0,622,621,1,0,0,0,623,624,1,0,0,0,624,622,1,0,0,0,
        624,625,1,0,0,0,625,626,1,0,0,0,626,627,3,72,36,0,627,628,3,180,
        90,0,628,149,1,0,0,0,629,631,5,52,0,0,630,632,3,34,17,0,631,630,
        1,0,0,0,631,632,1,0,0,0,632,636,1,0,0,0,633,637,3,32,16,0,634,637,
        3,28,14,0,635,637,3,30,15,0,636,633,1,0,0,0,636,634,1,0,0,0,636,
        635,1,0,0,0,636,637,1,0,0,0,637,638,1,0,0,0,638,639,3,2,1,0,639,
        640,5,66,0,0,640,641,3,2,1,0,641,151,1,0,0,0,642,646,5,30,0,0,643,
        645,3,180,90,0,644,643,1,0,0,0,645,648,1,0,0,0,646,644,1,0,0,0,646,
        647,1,0,0,0,647,649,1,0,0,0,648,646,1,0,0,0,649,650,5,29,0,0,650,
        153,1,0,0,0,651,655,5,56,0,0,652,656,3,30,15,0,653,656,3,32,16,0,
        654,656,3,28,14,0,655,652,1,0,0,0,655,653,1,0,0,0,655,654,1,0,0,
        0,655,656,1,0,0,0,656,657,1,0,0,0,657,658,5,33,0,0,658,659,5,9,0,
        0,659,660,5,78,0,0,660,661,3,180,90,0,661,662,1,0,0,0,662,677,5,
        84,0,0,663,667,3,30,15,0,664,667,3,32,16,0,665,667,3,28,14,0,666,
        663,1,0,0,0,666,664,1,0,0,0,666,665,1,0,0,0,666,667,1,0,0,0,667,
        668,1,0,0,0,668,672,5,47,0,0,669,671,3,180,90,0,670,669,1,0,0,0,
        671,674,1,0,0,0,672,670,1,0,0,0,672,673,1,0,0,0,673,675,1,0,0,0,
        674,672,1,0,0,0,675,676,5,78,0,0,676,678,3,180,90,0,677,666,1,0,
        0,0,677,678,1,0,0,0,678,694,1,0,0,0,679,683,5,56,0,0,680,684,3,30,
        15,0,681,684,3,32,16,0,682,684,3,28,14,0,683,680,1,0,0,0,683,681,
        1,0,0,0,683,682,1,0,0,0,683,684,1,0,0,0,684,688,1,0,0,0,685,687,
        3,180,90,0,686,685,1,0,0,0,687,690,1,0,0,0,688,686,1,0,0,0,688,689,
        1,0,0,0,689,691,1,0,0,0,690,688,1,0,0,0,691,692,5,78,0,0,692,694,
        3,180,90,0,693,651,1,0,0,0,693,679,1,0,0,0,694,155,1,0,0,0,695,696,
        5,94,0,0,696,699,3,180,90,0,697,698,5,64,0,0,698,700,3,180,90,0,
        699,697,1,0,0,0,700,701,1,0,0,0,701,699,1,0,0,0,701,702,1,0,0,0,
        702,703,1,0,0,0,703,704,5,95,0,0,704,157,1,0,0,0,705,706,5,56,0,
        0,706,159,1,0,0,0,707,730,5,96,0,0,708,709,3,180,90,0,709,710,5,
        66,0,0,710,711,3,2,1,0,711,713,1,0,0,0,712,708,1,0,0,0,713,716,1,
        0,0,0,714,712,1,0,0,0,714,715,1,0,0,0,715,731,1,0,0,0,716,714,1,
        0,0,0,717,719,3,180,90,0,718,717,1,0,0,0,719,722,1,0,0,0,720,718,
        1,0,0,0,720,721,1,0,0,0,721,723,1,0,0,0,722,720,1,0,0,0,723,727,
        3,158,79,0,724,726,3,180,90,0,725,724,1,0,0,0,726,729,1,0,0,0,727,
        725,1,0,0,0,727,728,1,0,0,0,728,731,1,0,0,0,729,727,1,0,0,0,730,
        714,1,0,0,0,730,720,1,0,0,0,731,732,1,0,0,0,732,733,5,97,0,0,733,
        161,1,0,0,0,734,735,5,60,0,0,735,163,1,0,0,0,736,737,5,104,0,0,737,
        740,3,2,1,0,738,741,3,72,36,0,739,741,3,162,81,0,740,738,1,0,0,0,
        740,739,1,0,0,0,741,742,1,0,0,0,742,743,3,2,1,0,743,745,1,0,0,0,
        744,736,1,0,0,0,745,746,1,0,0,0,746,744,1,0,0,0,746,747,1,0,0,0,
        747,165,1,0,0,0,748,749,5,34,0,0,749,167,1,0,0,0,750,751,5,36,0,
        0,751,169,1,0,0,0,752,753,5,35,0,0,753,171,1,0,0,0,754,755,5,37,
        0,0,755,173,1,0,0,0,756,757,5,38,0,0,757,175,1,0,0,0,758,759,5,93,
        0,0,759,177,1,0,0,0,760,761,5,32,0,0,761,179,1,0,0,0,762,849,3,2,
        1,0,763,849,3,0,0,0,764,849,3,4,2,0,765,849,3,6,3,0,766,849,3,10,
        5,0,767,849,3,12,6,0,768,849,3,8,4,0,769,849,3,14,7,0,770,849,3,
        20,10,0,771,849,3,22,11,0,772,849,3,36,18,0,773,849,3,24,12,0,774,
        849,3,26,13,0,775,849,3,28,14,0,776,849,3,30,15,0,777,849,3,32,16,
        0,778,849,3,34,17,0,779,849,3,38,19,0,780,849,3,42,21,0,781,849,
        3,44,22,0,782,849,3,46,23,0,783,849,3,48,24,0,784,849,3,50,25,0,
        785,849,3,52,26,0,786,849,3,54,27,0,787,849,3,56,28,0,788,849,3,
        58,29,0,789,849,3,60,30,0,790,849,3,62,31,0,791,849,3,64,32,0,792,
        849,3,66,33,0,793,849,3,68,34,0,794,849,3,70,35,0,795,849,3,72,36,
        0,796,849,3,74,37,0,797,849,3,76,38,0,798,849,3,78,39,0,799,849,
        3,80,40,0,800,849,3,82,41,0,801,849,3,84,42,0,802,849,3,86,43,0,
        803,849,3,88,44,0,804,849,3,90,45,0,805,849,3,92,46,0,806,849,3,
        94,47,0,807,849,3,96,48,0,808,849,3,40,20,0,809,849,3,98,49,0,810,
        849,3,100,50,0,811,849,3,102,51,0,812,849,3,104,52,0,813,849,3,106,
        53,0,814,849,3,108,54,0,815,849,3,110,55,0,816,849,3,112,56,0,817,
        849,3,120,60,0,818,849,3,114,57,0,819,849,3,116,58,0,820,849,3,118,
        59,0,821,849,3,124,62,0,822,849,3,126,63,0,823,849,3,128,64,0,824,
        849,3,130,65,0,825,849,3,132,66,0,826,849,3,134,67,0,827,849,3,136,
        68,0,828,849,3,138,69,0,829,849,3,140,70,0,830,849,3,142,71,0,831,
        849,3,144,72,0,832,849,3,146,73,0,833,849,3,148,74,0,834,849,3,150,
        75,0,835,849,3,152,76,0,836,849,3,154,77,0,837,849,3,156,78,0,838,
        849,3,158,79,0,839,849,3,160,80,0,840,849,3,164,82,0,841,849,3,166,
        83,0,842,849,3,168,84,0,843,849,3,170,85,0,844,849,3,172,86,0,845,
        849,3,174,87,0,846,849,3,176,88,0,847,849,3,178,89,0,848,762,1,0,
        0,0,848,763,1,0,0,0,848,764,1,0,0,0,848,765,1,0,0,0,848,766,1,0,
        0,0,848,767,1,0,0,0,848,768,1,0,0,0,848,769,1,0,0,0,848,770,1,0,
        0,0,848,771,1,0,0,0,848,772,1,0,0,0,848,773,1,0,0,0,848,774,1,0,
        0,0,848,775,1,0,0,0,848,776,1,0,0,0,848,777,1,0,0,0,848,778,1,0,
        0,0,848,779,1,0,0,0,848,780,1,0,0,0,848,781,1,0,0,0,848,782,1,0,
        0,0,848,783,1,0,0,0,848,784,1,0,0,0,848,785,1,0,0,0,848,786,1,0,
        0,0,848,787,1,0,0,0,848,788,1,0,0,0,848,789,1,0,0,0,848,790,1,0,
        0,0,848,791,1,0,0,0,848,792,1,0,0,0,848,793,1,0,0,0,848,794,1,0,
        0,0,848,795,1,0,0,0,848,796,1,0,0,0,848,797,1,0,0,0,848,798,1,0,
        0,0,848,799,1,0,0,0,848,800,1,0,0,0,848,801,1,0,0,0,848,802,1,0,
        0,0,848,803,1,0,0,0,848,804,1,0,0,0,848,805,1,0,0,0,848,806,1,0,
        0,0,848,807,1,0,0,0,848,808,1,0,0,0,848,809,1,0,0,0,848,810,1,0,
        0,0,848,811,1,0,0,0,848,812,1,0,0,0,848,813,1,0,0,0,848,814,1,0,
        0,0,848,815,1,0,0,0,848,816,1,0,0,0,848,817,1,0,0,0,848,818,1,0,
        0,0,848,819,1,0,0,0,848,820,1,0,0,0,848,821,1,0,0,0,848,822,1,0,
        0,0,848,823,1,0,0,0,848,824,1,0,0,0,848,825,1,0,0,0,848,826,1,0,
        0,0,848,827,1,0,0,0,848,828,1,0,0,0,848,829,1,0,0,0,848,830,1,0,
        0,0,848,831,1,0,0,0,848,832,1,0,0,0,848,833,1,0,0,0,848,834,1,0,
        0,0,848,835,1,0,0,0,848,836,1,0,0,0,848,837,1,0,0,0,848,838,1,0,
        0,0,848,839,1,0,0,0,848,840,1,0,0,0,848,841,1,0,0,0,848,842,1,0,
        0,0,848,843,1,0,0,0,848,844,1,0,0,0,848,845,1,0,0,0,848,846,1,0,
        0,0,848,847,1,0,0,0,849,181,1,0,0,0,850,852,3,180,90,0,851,850,1,
        0,0,0,852,855,1,0,0,0,853,851,1,0,0,0,853,854,1,0,0,0,854,856,1,
        0,0,0,855,853,1,0,0,0,856,857,5,0,0,1,857,183,1,0,0,0,68,192,212,
        221,223,238,258,268,273,279,285,291,297,301,306,312,320,326,382,
        397,411,417,421,430,436,440,450,456,460,471,477,483,489,493,503,
        513,523,534,541,547,551,557,565,572,577,580,584,590,612,624,631,
        636,646,655,666,672,677,683,688,693,701,714,720,727,730,740,746,
        848,853
    ]

class FSharpParser ( Parser ):

    grammarFileName = "FSharpParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'rec'", "'public'", "'private'", 
                     "'internal'", "'mutable'", "'let'", "'fun'", "'while'", 
                     "'do'", "'for'", "'to'", "'downto'", "'in'", "'$'", 
                     "'type'", "'module'", "'open'", "'namespace'", "'class'", 
                     "'end'", "'struct'", "'and'", "'interface'", "'get'", 
                     "'inherit'", "'override'", "'default'", "'abstract'", 
                     "'base'", "'async'", "'task'", "'new'", "'then'", "'this'", 
                     "'member'", "'seq'", "'Map'", "'set'", "'raise'", "'reraise'", 
                     "'failwith'", "'invalidArg'", "'val'", "'try'", "'finally'", 
                     "'match'", "'with'", "'use'", "'using'", "'exception'", 
                     "'of'", "'.'", "'..'", "'!'", "','", "';'", "':'", 
                     "'<-'", "'|>'", "'_'", "'->'", "'>>'", "'+'", "'-'", 
                     "'*'", "'/'", "'**'", "'%'", "'='", "'<>'", "'<'", 
                     "'>'", "'<='", "'>='", "'&&'", "'||'", "'<<<'", "'>>>'", 
                     "'&&&'", "'|||'", "'^^^'", "'~~~'", "'not'", "':?'", 
                     "'('", "')'", "'{'", "'}'", "'['", "']'", "'\"'", "'if'", 
                     "'elif'", "'else'", "'|'", "'\\n'" ]

    symbolicNames = [ "<INVALID>", "WHITE_SPACE", "COMMENT", "INT", "FLOAT", 
                      "INTERPOLATIONSIGN", "CHAR", "ESC", "BOOL", "UNIT", 
                      "REC", "PUBLIC", "PRIVATE", "INTERNAL", "MUTABLE", 
                      "LET", "FUN", "WHILE", "DO", "FOR", "TO", "DOWNTO", 
                      "IN", "DOLLAR", "TYPE", "MODULE", "OPEN", "NAMESPACE", 
                      "CLASS", "END", "STRUCT", "WITH_AND", "INTERFACE", 
                      "GET", "INHERIT", "OVERRIDE", "DEFAULT", "ABSTRACT", 
                      "BASE", "ASYNC", "TASK", "NEW", "THEN", "THIS", "MEMBER", 
                      "SEQ", "MAP", "SET", "RAISE", "RERAISE", "FAILWITH", 
                      "INVALIDARG", "VAL", "TRY", "FINALLY", "MATCH", "WITH", 
                      "USE", "USING", "EXCEPTION", "OF", "DOT", "DOTDOT", 
                      "EXCLAMATION_MARK", "COMMA", "SEMICOLON", "COLON", 
                      "ASSIGN", "PIPE", "MISSING_ARG", "RIGHT_ARROW", "COMPOS", 
                      "ADD", "MINUS", "MUL", "DIV", "POW", "MOD", "EQUAL", 
                      "NOT_EQUAL", "LESS", "GREATER", "LESS_EQUAL", "GREATER_EQUAL", 
                      "AND", "OR", "LSHIFT", "RSHIFT", "LOG_MUL", "LOG_ADD", 
                      "LOG_XOR", "LOG_NOT", "NOT", "COLON_Q", "OPEN_PAREN", 
                      "CLOSE_PAREN", "OPEN_BRACE", "CLOSE_BRACE", "OPEN_BRACKET", 
                      "CLOSE_BRACKET", "DOUBLE_QUOTES", "IF", "ELIF", "ELSE", 
                      "VERTICAL_LINE", "NEWLINE", "IDENTIFIER" ]

    RULE_dot = 0
    RULE_dotIentifier = 1
    RULE_int = 2
    RULE_float = 3
    RULE_unit = 4
    RULE_bool = 5
    RULE_char = 6
    RULE_missing_arg = 7
    RULE_interpolationSign = 8
    RULE_dollar = 9
    RULE_string = 10
    RULE_attribute = 11
    RULE_round_brackets = 12
    RULE_rec = 13
    RULE_public = 14
    RULE_private = 15
    RULE_internal = 16
    RULE_mutable = 17
    RULE_let = 18
    RULE_fun = 19
    RULE_fun_type = 20
    RULE_typezation = 21
    RULE_if_then_elif_else = 22
    RULE_while_do = 23
    RULE_for = 24
    RULE_add = 25
    RULE_mul = 26
    RULE_div = 27
    RULE_minus = 28
    RULE_pow = 29
    RULE_mod = 30
    RULE_not_equal = 31
    RULE_less = 32
    RULE_less_equal = 33
    RULE_greater = 34
    RULE_greater_equal = 35
    RULE_equal = 36
    RULE_and = 37
    RULE_or = 38
    RULE_lshift = 39
    RULE_rshift = 40
    RULE_log_mul = 41
    RULE_log_add = 42
    RULE_log_xor = 43
    RULE_log_not = 44
    RULE_not = 45
    RULE_pipe = 46
    RULE_compos = 47
    RULE_assign = 48
    RULE_type = 49
    RULE_module = 50
    RULE_open = 51
    RULE_namespace = 52
    RULE_class = 53
    RULE_do = 54
    RULE_new = 55
    RULE_seq = 56
    RULE_list = 57
    RULE_array = 58
    RULE_map = 59
    RULE_generator = 60
    RULE_set = 61
    RULE_async_rule = 62
    RULE_task = 63
    RULE_exclamation_mark = 64
    RULE_match_with = 65
    RULE_try_with_finally = 66
    RULE_use = 67
    RULE_using = 68
    RULE_raise = 69
    RULE_reraise = 70
    RULE_failwith = 71
    RULE_invalidArg = 72
    RULE_exception_of = 73
    RULE_member = 74
    RULE_val = 75
    RULE_struct = 76
    RULE_with_get_set = 77
    RULE_tuple = 78
    RULE_with = 79
    RULE_record = 80
    RULE_of = 81
    RULE_enum = 82
    RULE_inherit = 83
    RULE_default = 84
    RULE_override = 85
    RULE_abstract = 86
    RULE_base = 87
    RULE_colon_q = 88
    RULE_interface = 89
    RULE_expression = 90
    RULE_exprs = 91

    ruleNames =  [ "dot", "dotIentifier", "int", "float", "unit", "bool", 
                   "char", "missing_arg", "interpolationSign", "dollar", 
                   "string", "attribute", "round_brackets", "rec", "public", 
                   "private", "internal", "mutable", "let", "fun", "fun_type", 
                   "typezation", "if_then_elif_else", "while_do", "for", 
                   "add", "mul", "div", "minus", "pow", "mod", "not_equal", 
                   "less", "less_equal", "greater", "greater_equal", "equal", 
                   "and", "or", "lshift", "rshift", "log_mul", "log_add", 
                   "log_xor", "log_not", "not", "pipe", "compos", "assign", 
                   "type", "module", "open", "namespace", "class", "do", 
                   "new", "seq", "list", "array", "map", "generator", "set", 
                   "async_rule", "task", "exclamation_mark", "match_with", 
                   "try_with_finally", "use", "using", "raise", "reraise", 
                   "failwith", "invalidArg", "exception_of", "member", "val", 
                   "struct", "with_get_set", "tuple", "with", "record", 
                   "of", "enum", "inherit", "default", "override", "abstract", 
                   "base", "colon_q", "interface", "expression", "exprs" ]

    EOF = Token.EOF
    WHITE_SPACE=1
    COMMENT=2
    INT=3
    FLOAT=4
    INTERPOLATIONSIGN=5
    CHAR=6
    ESC=7
    BOOL=8
    UNIT=9
    REC=10
    PUBLIC=11
    PRIVATE=12
    INTERNAL=13
    MUTABLE=14
    LET=15
    FUN=16
    WHILE=17
    DO=18
    FOR=19
    TO=20
    DOWNTO=21
    IN=22
    DOLLAR=23
    TYPE=24
    MODULE=25
    OPEN=26
    NAMESPACE=27
    CLASS=28
    END=29
    STRUCT=30
    WITH_AND=31
    INTERFACE=32
    GET=33
    INHERIT=34
    OVERRIDE=35
    DEFAULT=36
    ABSTRACT=37
    BASE=38
    ASYNC=39
    TASK=40
    NEW=41
    THEN=42
    THIS=43
    MEMBER=44
    SEQ=45
    MAP=46
    SET=47
    RAISE=48
    RERAISE=49
    FAILWITH=50
    INVALIDARG=51
    VAL=52
    TRY=53
    FINALLY=54
    MATCH=55
    WITH=56
    USE=57
    USING=58
    EXCEPTION=59
    OF=60
    DOT=61
    DOTDOT=62
    EXCLAMATION_MARK=63
    COMMA=64
    SEMICOLON=65
    COLON=66
    ASSIGN=67
    PIPE=68
    MISSING_ARG=69
    RIGHT_ARROW=70
    COMPOS=71
    ADD=72
    MINUS=73
    MUL=74
    DIV=75
    POW=76
    MOD=77
    EQUAL=78
    NOT_EQUAL=79
    LESS=80
    GREATER=81
    LESS_EQUAL=82
    GREATER_EQUAL=83
    AND=84
    OR=85
    LSHIFT=86
    RSHIFT=87
    LOG_MUL=88
    LOG_ADD=89
    LOG_XOR=90
    LOG_NOT=91
    NOT=92
    COLON_Q=93
    OPEN_PAREN=94
    CLOSE_PAREN=95
    OPEN_BRACE=96
    CLOSE_BRACE=97
    OPEN_BRACKET=98
    CLOSE_BRACKET=99
    DOUBLE_QUOTES=100
    IF=101
    ELIF=102
    ELSE=103
    VERTICAL_LINE=104
    NEWLINE=105
    IDENTIFIER=106

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class DotContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(FSharpParser.DOT, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_dot

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDot" ):
                listener.enterDot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDot" ):
                listener.exitDot(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDot" ):
                return visitor.visitDot(self)
            else:
                return visitor.visitChildren(self)




    def dot(self):

        localctx = FSharpParser.DotContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_dot)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 184
            self.match(FSharpParser.DOT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DotIentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(FSharpParser.IDENTIFIER)
            else:
                return self.getToken(FSharpParser.IDENTIFIER, i)

        def dot(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.DotContext)
            else:
                return self.getTypedRuleContext(FSharpParser.DotContext,i)


        def getRuleIndex(self):
            return FSharpParser.RULE_dotIentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotIentifier" ):
                listener.enterDotIentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotIentifier" ):
                listener.exitDotIentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotIentifier" ):
                return visitor.visitDotIentifier(self)
            else:
                return visitor.visitChildren(self)




    def dotIentifier(self):

        localctx = FSharpParser.DotIentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_dotIentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 186
            self.match(FSharpParser.IDENTIFIER)
            self.state = 192
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 187
                    self.dot()
                    self.state = 188
                    self.match(FSharpParser.IDENTIFIER) 
                self.state = 194
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT(self):
            return self.getToken(FSharpParser.INT, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_int

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInt" ):
                listener.enterInt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInt" ):
                listener.exitInt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInt" ):
                return visitor.visitInt(self)
            else:
                return visitor.visitChildren(self)




    def int_(self):

        localctx = FSharpParser.IntContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_int)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 195
            self.match(FSharpParser.INT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FloatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLOAT(self):
            return self.getToken(FSharpParser.FLOAT, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_float

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFloat" ):
                listener.enterFloat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFloat" ):
                listener.exitFloat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFloat" ):
                return visitor.visitFloat(self)
            else:
                return visitor.visitChildren(self)




    def float_(self):

        localctx = FSharpParser.FloatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_float)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 197
            self.match(FSharpParser.FLOAT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNIT(self):
            return self.getToken(FSharpParser.UNIT, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_unit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnit" ):
                listener.enterUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnit" ):
                listener.exitUnit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnit" ):
                return visitor.visitUnit(self)
            else:
                return visitor.visitChildren(self)




    def unit(self):

        localctx = FSharpParser.UnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_unit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 199
            self.match(FSharpParser.UNIT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BOOL(self):
            return self.getToken(FSharpParser.BOOL, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_bool

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBool" ):
                listener.enterBool(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBool" ):
                listener.exitBool(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBool" ):
                return visitor.visitBool(self)
            else:
                return visitor.visitChildren(self)




    def bool_(self):

        localctx = FSharpParser.BoolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_bool)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 201
            self.match(FSharpParser.BOOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CharContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR(self):
            return self.getToken(FSharpParser.CHAR, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_char

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChar" ):
                listener.enterChar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChar" ):
                listener.exitChar(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitChar" ):
                return visitor.visitChar(self)
            else:
                return visitor.visitChildren(self)




    def char(self):

        localctx = FSharpParser.CharContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_char)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 203
            self.match(FSharpParser.CHAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Missing_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MISSING_ARG(self):
            return self.getToken(FSharpParser.MISSING_ARG, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_missing_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMissing_arg" ):
                listener.enterMissing_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMissing_arg" ):
                listener.exitMissing_arg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMissing_arg" ):
                return visitor.visitMissing_arg(self)
            else:
                return visitor.visitChildren(self)




    def missing_arg(self):

        localctx = FSharpParser.Missing_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_missing_arg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 205
            self.match(FSharpParser.MISSING_ARG)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterpolationSignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERPOLATIONSIGN(self):
            return self.getToken(FSharpParser.INTERPOLATIONSIGN, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_interpolationSign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterpolationSign" ):
                listener.enterInterpolationSign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterpolationSign" ):
                listener.exitInterpolationSign(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterpolationSign" ):
                return visitor.visitInterpolationSign(self)
            else:
                return visitor.visitChildren(self)




    def interpolationSign(self):

        localctx = FSharpParser.InterpolationSignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_interpolationSign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 207
            self.match(FSharpParser.INTERPOLATIONSIGN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DollarContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOLLAR(self):
            return self.getToken(FSharpParser.DOLLAR, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_dollar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDollar" ):
                listener.enterDollar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDollar" ):
                listener.exitDollar(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDollar" ):
                return visitor.visitDollar(self)
            else:
                return visitor.visitChildren(self)




    def dollar(self):

        localctx = FSharpParser.DollarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_dollar)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 209
            self.match(FSharpParser.DOLLAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLE_QUOTES(self, i:int=None):
            if i is None:
                return self.getTokens(FSharpParser.DOUBLE_QUOTES)
            else:
                return self.getToken(FSharpParser.DOUBLE_QUOTES, i)

        def dollar(self):
            return self.getTypedRuleContext(FSharpParser.DollarContext,0)


        def interpolationSign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.InterpolationSignContext)
            else:
                return self.getTypedRuleContext(FSharpParser.InterpolationSignContext,i)


        def CHAR(self, i:int=None):
            if i is None:
                return self.getTokens(FSharpParser.CHAR)
            else:
                return self.getToken(FSharpParser.CHAR, i)

        def OPEN_BRACE(self, i:int=None):
            if i is None:
                return self.getTokens(FSharpParser.OPEN_BRACE)
            else:
                return self.getToken(FSharpParser.OPEN_BRACE, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(FSharpParser.ExpressionContext,i)


        def CLOSE_BRACE(self, i:int=None):
            if i is None:
                return self.getTokens(FSharpParser.CLOSE_BRACE)
            else:
                return self.getToken(FSharpParser.CLOSE_BRACE, i)

        def getRuleIndex(self):
            return FSharpParser.RULE_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString" ):
                listener.enterString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString" ):
                listener.exitString(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitString" ):
                return visitor.visitString(self)
            else:
                return visitor.visitChildren(self)




    def string(self):

        localctx = FSharpParser.StringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_string)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 212
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==23:
                self.state = 211
                self.dollar()


            self.state = 214
            self.match(FSharpParser.DOUBLE_QUOTES)
            self.state = 223
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5 or _la==6 or _la==96:
                self.state = 221
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [96]:
                    self.state = 215
                    self.match(FSharpParser.OPEN_BRACE)
                    self.state = 216
                    self.expression()
                    self.state = 217
                    self.match(FSharpParser.CLOSE_BRACE)
                    pass
                elif token in [5]:
                    self.state = 219
                    self.interpolationSign()
                    pass
                elif token in [6]:
                    self.state = 220
                    self.match(FSharpParser.CHAR)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 225
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 226
            self.match(FSharpParser.DOUBLE_QUOTES)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACKET(self):
            return self.getToken(FSharpParser.OPEN_BRACKET, 0)

        def LESS(self):
            return self.getToken(FSharpParser.LESS, 0)

        def dotIentifier(self):
            return self.getTypedRuleContext(FSharpParser.DotIentifierContext,0)


        def GREATER(self):
            return self.getToken(FSharpParser.GREATER, 0)

        def CLOSE_BRACKET(self):
            return self.getToken(FSharpParser.CLOSE_BRACKET, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute" ):
                listener.enterAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute" ):
                listener.exitAttribute(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttribute" ):
                return visitor.visitAttribute(self)
            else:
                return visitor.visitChildren(self)




    def attribute(self):

        localctx = FSharpParser.AttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_attribute)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 228
            self.match(FSharpParser.OPEN_BRACKET)
            self.state = 229
            self.match(FSharpParser.LESS)
            self.state = 230
            self.dotIentifier()
            self.state = 231
            self.match(FSharpParser.GREATER)
            self.state = 232
            self.match(FSharpParser.CLOSE_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Round_bracketsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(FSharpParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(FSharpParser.CLOSE_PAREN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(FSharpParser.ExpressionContext,i)


        def getRuleIndex(self):
            return FSharpParser.RULE_round_brackets

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRound_brackets" ):
                listener.enterRound_brackets(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRound_brackets" ):
                listener.exitRound_brackets(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRound_brackets" ):
                return visitor.visitRound_brackets(self)
            else:
                return visitor.visitChildren(self)




    def round_brackets(self):

        localctx = FSharpParser.Round_bracketsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_round_brackets)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 234
            self.match(FSharpParser.OPEN_PAREN)
            self.state = 236 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 235
                self.expression()
                self.state = 238 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -5782775864453234856) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 1431834722287) != 0)):
                    break

            self.state = 240
            self.match(FSharpParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REC(self):
            return self.getToken(FSharpParser.REC, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_rec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRec" ):
                listener.enterRec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRec" ):
                listener.exitRec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRec" ):
                return visitor.visitRec(self)
            else:
                return visitor.visitChildren(self)




    def rec(self):

        localctx = FSharpParser.RecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_rec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 242
            self.match(FSharpParser.REC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PublicContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PUBLIC(self):
            return self.getToken(FSharpParser.PUBLIC, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_public

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPublic" ):
                listener.enterPublic(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPublic" ):
                listener.exitPublic(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPublic" ):
                return visitor.visitPublic(self)
            else:
                return visitor.visitChildren(self)




    def public(self):

        localctx = FSharpParser.PublicContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_public)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 244
            self.match(FSharpParser.PUBLIC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRIVATE(self):
            return self.getToken(FSharpParser.PRIVATE, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_private

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivate" ):
                listener.enterPrivate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivate" ):
                listener.exitPrivate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrivate" ):
                return visitor.visitPrivate(self)
            else:
                return visitor.visitChildren(self)




    def private(self):

        localctx = FSharpParser.PrivateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_private)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 246
            self.match(FSharpParser.PRIVATE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InternalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERNAL(self):
            return self.getToken(FSharpParser.INTERNAL, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_internal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInternal" ):
                listener.enterInternal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInternal" ):
                listener.exitInternal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInternal" ):
                return visitor.visitInternal(self)
            else:
                return visitor.visitChildren(self)




    def internal(self):

        localctx = FSharpParser.InternalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_internal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 248
            self.match(FSharpParser.INTERNAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MutableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MUTABLE(self):
            return self.getToken(FSharpParser.MUTABLE, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_mutable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMutable" ):
                listener.enterMutable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMutable" ):
                listener.exitMutable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMutable" ):
                return visitor.visitMutable(self)
            else:
                return visitor.visitChildren(self)




    def mutable(self):

        localctx = FSharpParser.MutableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_mutable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 250
            self.match(FSharpParser.MUTABLE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LET(self):
            return self.getToken(FSharpParser.LET, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_let

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLet" ):
                listener.enterLet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLet" ):
                listener.exitLet(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLet" ):
                return visitor.visitLet(self)
            else:
                return visitor.visitChildren(self)




    def let(self):

        localctx = FSharpParser.LetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_let)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 252
            self.match(FSharpParser.LET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUN(self):
            return self.getToken(FSharpParser.FUN, 0)

        def RIGHT_ARROW(self):
            return self.getToken(FSharpParser.RIGHT_ARROW, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(FSharpParser.ExpressionContext,i)


        def getRuleIndex(self):
            return FSharpParser.RULE_fun

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFun" ):
                listener.enterFun(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFun" ):
                listener.exitFun(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFun" ):
                return visitor.visitFun(self)
            else:
                return visitor.visitChildren(self)




    def fun(self):

        localctx = FSharpParser.FunContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_fun)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 254
            self.match(FSharpParser.FUN)
            self.state = 256 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 255
                self.expression()
                self.state = 258 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -5782775864453234856) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 1431834722287) != 0)):
                    break

            self.state = 260
            self.match(FSharpParser.RIGHT_ARROW)
            self.state = 261
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fun_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotIentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.DotIentifierContext)
            else:
                return self.getTypedRuleContext(FSharpParser.DotIentifierContext,i)


        def RIGHT_ARROW(self, i:int=None):
            if i is None:
                return self.getTokens(FSharpParser.RIGHT_ARROW)
            else:
                return self.getToken(FSharpParser.RIGHT_ARROW, i)

        def getRuleIndex(self):
            return FSharpParser.RULE_fun_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFun_type" ):
                listener.enterFun_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFun_type" ):
                listener.exitFun_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFun_type" ):
                return visitor.visitFun_type(self)
            else:
                return visitor.visitChildren(self)




    def fun_type(self):

        localctx = FSharpParser.Fun_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_fun_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 263
            self.dotIentifier()
            self.state = 266 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 264
                    self.match(FSharpParser.RIGHT_ARROW)
                    self.state = 265
                    self.dotIentifier()

                else:
                    raise NoViableAltException(self)
                self.state = 268 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,6,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypezationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(FSharpParser.COLON, 0)

        def round_brackets(self):
            return self.getTypedRuleContext(FSharpParser.Round_bracketsContext,0)


        def dotIentifier(self):
            return self.getTypedRuleContext(FSharpParser.DotIentifierContext,0)


        def getRuleIndex(self):
            return FSharpParser.RULE_typezation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypezation" ):
                listener.enterTypezation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypezation" ):
                listener.exitTypezation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypezation" ):
                return visitor.visitTypezation(self)
            else:
                return visitor.visitChildren(self)




    def typezation(self):

        localctx = FSharpParser.TypezationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_typezation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 270
            self.match(FSharpParser.COLON)
            self.state = 273
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [94]:
                self.state = 271
                self.round_brackets()
                pass
            elif token in [106]:
                self.state = 272
                self.dotIentifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_then_elif_elseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(FSharpParser.IF, 0)

        def THEN(self, i:int=None):
            if i is None:
                return self.getTokens(FSharpParser.THEN)
            else:
                return self.getToken(FSharpParser.THEN, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(FSharpParser.ExpressionContext,i)


        def ELIF(self, i:int=None):
            if i is None:
                return self.getTokens(FSharpParser.ELIF)
            else:
                return self.getToken(FSharpParser.ELIF, i)

        def ELSE(self):
            return self.getToken(FSharpParser.ELSE, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_if_then_elif_else

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_then_elif_else" ):
                listener.enterIf_then_elif_else(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_then_elif_else" ):
                listener.exitIf_then_elif_else(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIf_then_elif_else" ):
                return visitor.visitIf_then_elif_else(self)
            else:
                return visitor.visitChildren(self)




    def if_then_elif_else(self):

        localctx = FSharpParser.If_then_elif_elseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_if_then_elif_else)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 275
            self.match(FSharpParser.IF)
            self.state = 277 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 276
                self.expression()
                self.state = 279 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -5782775864453234856) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 1431834722287) != 0)):
                    break

            self.state = 281
            self.match(FSharpParser.THEN)
            self.state = 283 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 282
                    self.expression()

                else:
                    raise NoViableAltException(self)
                self.state = 285 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,9,self._ctx)

            self.state = 301
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,12,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 287
                    self.match(FSharpParser.ELIF)
                    self.state = 289 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 288
                        self.expression()
                        self.state = 291 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -5782775864453234856) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 1431834722287) != 0)):
                            break

                    self.state = 293
                    self.match(FSharpParser.THEN)
                    self.state = 295 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 294
                            self.expression()

                        else:
                            raise NoViableAltException(self)
                        self.state = 297 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,11,self._ctx)
             
                self.state = 303
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,12,self._ctx)

            self.state = 306
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.state = 304
                self.match(FSharpParser.ELSE)
                self.state = 305
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class While_doContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(FSharpParser.WHILE, 0)

        def DO(self):
            return self.getToken(FSharpParser.DO, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(FSharpParser.ExpressionContext,i)


        def getRuleIndex(self):
            return FSharpParser.RULE_while_do

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhile_do" ):
                listener.enterWhile_do(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhile_do" ):
                listener.exitWhile_do(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhile_do" ):
                return visitor.visitWhile_do(self)
            else:
                return visitor.visitChildren(self)




    def while_do(self):

        localctx = FSharpParser.While_doContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_while_do)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 308
            self.match(FSharpParser.WHILE)
            self.state = 310 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 309
                    self.expression()

                else:
                    raise NoViableAltException(self)
                self.state = 312 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,14,self._ctx)

            self.state = 314
            self.match(FSharpParser.DO)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(FSharpParser.FOR, 0)

        def DO(self):
            return self.getToken(FSharpParser.DO, 0)

        def TO(self):
            return self.getToken(FSharpParser.TO, 0)

        def DOWNTO(self):
            return self.getToken(FSharpParser.DOWNTO, 0)

        def IN(self):
            return self.getToken(FSharpParser.IN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(FSharpParser.ExpressionContext,i)


        def getRuleIndex(self):
            return FSharpParser.RULE_for

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor" ):
                listener.enterFor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor" ):
                listener.exitFor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor" ):
                return visitor.visitFor(self)
            else:
                return visitor.visitChildren(self)




    def for_(self):

        localctx = FSharpParser.ForContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_for)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 316
            self.match(FSharpParser.FOR)
            self.state = 318 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 317
                self.expression()
                self.state = 320 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -5782775864453234856) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 1431834722287) != 0)):
                    break

            self.state = 322
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 7340032) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 324 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 323
                    self.expression()

                else:
                    raise NoViableAltException(self)
                self.state = 326 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,16,self._ctx)

            self.state = 328
            self.match(FSharpParser.DO)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AddContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(FSharpParser.ADD, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_add

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdd" ):
                listener.enterAdd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdd" ):
                listener.exitAdd(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdd" ):
                return visitor.visitAdd(self)
            else:
                return visitor.visitChildren(self)




    def add(self):

        localctx = FSharpParser.AddContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_add)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 330
            self.match(FSharpParser.ADD)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MulContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MUL(self):
            return self.getToken(FSharpParser.MUL, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_mul

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMul" ):
                listener.enterMul(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMul" ):
                listener.exitMul(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMul" ):
                return visitor.visitMul(self)
            else:
                return visitor.visitChildren(self)




    def mul(self):

        localctx = FSharpParser.MulContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_mul)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 332
            self.match(FSharpParser.MUL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DivContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DIV(self):
            return self.getToken(FSharpParser.DIV, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_div

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiv" ):
                listener.enterDiv(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiv" ):
                listener.exitDiv(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiv" ):
                return visitor.visitDiv(self)
            else:
                return visitor.visitChildren(self)




    def div(self):

        localctx = FSharpParser.DivContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_div)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 334
            self.match(FSharpParser.DIV)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MinusContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS(self):
            return self.getToken(FSharpParser.MINUS, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_minus

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinus" ):
                listener.enterMinus(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinus" ):
                listener.exitMinus(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMinus" ):
                return visitor.visitMinus(self)
            else:
                return visitor.visitChildren(self)




    def minus(self):

        localctx = FSharpParser.MinusContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_minus)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 336
            self.match(FSharpParser.MINUS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PowContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POW(self):
            return self.getToken(FSharpParser.POW, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_pow

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPow" ):
                listener.enterPow(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPow" ):
                listener.exitPow(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPow" ):
                return visitor.visitPow(self)
            else:
                return visitor.visitChildren(self)




    def pow_(self):

        localctx = FSharpParser.PowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_pow)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 338
            self.match(FSharpParser.POW)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MOD(self):
            return self.getToken(FSharpParser.MOD, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_mod

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMod" ):
                listener.enterMod(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMod" ):
                listener.exitMod(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMod" ):
                return visitor.visitMod(self)
            else:
                return visitor.visitChildren(self)




    def mod(self):

        localctx = FSharpParser.ModContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_mod)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 340
            self.match(FSharpParser.MOD)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Not_equalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT_EQUAL(self):
            return self.getToken(FSharpParser.NOT_EQUAL, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_not_equal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNot_equal" ):
                listener.enterNot_equal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNot_equal" ):
                listener.exitNot_equal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNot_equal" ):
                return visitor.visitNot_equal(self)
            else:
                return visitor.visitChildren(self)




    def not_equal(self):

        localctx = FSharpParser.Not_equalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_not_equal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 342
            self.match(FSharpParser.NOT_EQUAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LessContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LESS(self):
            return self.getToken(FSharpParser.LESS, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_less

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLess" ):
                listener.enterLess(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLess" ):
                listener.exitLess(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLess" ):
                return visitor.visitLess(self)
            else:
                return visitor.visitChildren(self)




    def less(self):

        localctx = FSharpParser.LessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_less)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 344
            self.match(FSharpParser.LESS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Less_equalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LESS_EQUAL(self):
            return self.getToken(FSharpParser.LESS_EQUAL, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_less_equal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLess_equal" ):
                listener.enterLess_equal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLess_equal" ):
                listener.exitLess_equal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLess_equal" ):
                return visitor.visitLess_equal(self)
            else:
                return visitor.visitChildren(self)




    def less_equal(self):

        localctx = FSharpParser.Less_equalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_less_equal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 346
            self.match(FSharpParser.LESS_EQUAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GreaterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GREATER(self):
            return self.getToken(FSharpParser.GREATER, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_greater

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGreater" ):
                listener.enterGreater(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGreater" ):
                listener.exitGreater(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGreater" ):
                return visitor.visitGreater(self)
            else:
                return visitor.visitChildren(self)




    def greater(self):

        localctx = FSharpParser.GreaterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_greater)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 348
            self.match(FSharpParser.GREATER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Greater_equalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GREATER_EQUAL(self):
            return self.getToken(FSharpParser.GREATER_EQUAL, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_greater_equal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGreater_equal" ):
                listener.enterGreater_equal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGreater_equal" ):
                listener.exitGreater_equal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGreater_equal" ):
                return visitor.visitGreater_equal(self)
            else:
                return visitor.visitChildren(self)




    def greater_equal(self):

        localctx = FSharpParser.Greater_equalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_greater_equal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 350
            self.match(FSharpParser.GREATER_EQUAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EqualContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUAL(self):
            return self.getToken(FSharpParser.EQUAL, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_equal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqual" ):
                listener.enterEqual(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqual" ):
                listener.exitEqual(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEqual" ):
                return visitor.visitEqual(self)
            else:
                return visitor.visitChildren(self)




    def equal(self):

        localctx = FSharpParser.EqualContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_equal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 352
            self.match(FSharpParser.EQUAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AndContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AND(self):
            return self.getToken(FSharpParser.AND, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_and

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnd" ):
                listener.enterAnd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnd" ):
                listener.exitAnd(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnd" ):
                return visitor.visitAnd(self)
            else:
                return visitor.visitChildren(self)




    def and_(self):

        localctx = FSharpParser.AndContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_and)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 354
            self.match(FSharpParser.AND)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OR(self):
            return self.getToken(FSharpParser.OR, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_or

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOr" ):
                listener.enterOr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOr" ):
                listener.exitOr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOr" ):
                return visitor.visitOr(self)
            else:
                return visitor.visitChildren(self)




    def or_(self):

        localctx = FSharpParser.OrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_or)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 356
            self.match(FSharpParser.OR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LshiftContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSHIFT(self):
            return self.getToken(FSharpParser.LSHIFT, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_lshift

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLshift" ):
                listener.enterLshift(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLshift" ):
                listener.exitLshift(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLshift" ):
                return visitor.visitLshift(self)
            else:
                return visitor.visitChildren(self)




    def lshift(self):

        localctx = FSharpParser.LshiftContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_lshift)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 358
            self.match(FSharpParser.LSHIFT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RshiftContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RSHIFT(self):
            return self.getToken(FSharpParser.RSHIFT, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_rshift

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRshift" ):
                listener.enterRshift(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRshift" ):
                listener.exitRshift(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRshift" ):
                return visitor.visitRshift(self)
            else:
                return visitor.visitChildren(self)




    def rshift(self):

        localctx = FSharpParser.RshiftContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_rshift)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 360
            self.match(FSharpParser.RSHIFT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Log_mulContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOG_MUL(self):
            return self.getToken(FSharpParser.LOG_MUL, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_log_mul

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLog_mul" ):
                listener.enterLog_mul(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLog_mul" ):
                listener.exitLog_mul(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLog_mul" ):
                return visitor.visitLog_mul(self)
            else:
                return visitor.visitChildren(self)




    def log_mul(self):

        localctx = FSharpParser.Log_mulContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_log_mul)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 362
            self.match(FSharpParser.LOG_MUL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Log_addContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOG_ADD(self):
            return self.getToken(FSharpParser.LOG_ADD, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_log_add

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLog_add" ):
                listener.enterLog_add(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLog_add" ):
                listener.exitLog_add(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLog_add" ):
                return visitor.visitLog_add(self)
            else:
                return visitor.visitChildren(self)




    def log_add(self):

        localctx = FSharpParser.Log_addContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_log_add)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 364
            self.match(FSharpParser.LOG_ADD)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Log_xorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOG_XOR(self):
            return self.getToken(FSharpParser.LOG_XOR, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_log_xor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLog_xor" ):
                listener.enterLog_xor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLog_xor" ):
                listener.exitLog_xor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLog_xor" ):
                return visitor.visitLog_xor(self)
            else:
                return visitor.visitChildren(self)




    def log_xor(self):

        localctx = FSharpParser.Log_xorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_log_xor)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 366
            self.match(FSharpParser.LOG_XOR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Log_notContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOG_NOT(self):
            return self.getToken(FSharpParser.LOG_NOT, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_log_not

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLog_not" ):
                listener.enterLog_not(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLog_not" ):
                listener.exitLog_not(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLog_not" ):
                return visitor.visitLog_not(self)
            else:
                return visitor.visitChildren(self)




    def log_not(self):

        localctx = FSharpParser.Log_notContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_log_not)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 368
            self.match(FSharpParser.LOG_NOT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NotContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(FSharpParser.NOT, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_not

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNot" ):
                listener.enterNot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNot" ):
                listener.exitNot(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNot" ):
                return visitor.visitNot(self)
            else:
                return visitor.visitChildren(self)




    def not_(self):

        localctx = FSharpParser.NotContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_not)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 370
            self.match(FSharpParser.NOT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PipeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PIPE(self):
            return self.getToken(FSharpParser.PIPE, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_pipe

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPipe" ):
                listener.enterPipe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPipe" ):
                listener.exitPipe(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPipe" ):
                return visitor.visitPipe(self)
            else:
                return visitor.visitChildren(self)




    def pipe(self):

        localctx = FSharpParser.PipeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_pipe)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 372
            self.match(FSharpParser.PIPE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComposContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMPOS(self):
            return self.getToken(FSharpParser.COMPOS, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_compos

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompos" ):
                listener.enterCompos(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompos" ):
                listener.exitCompos(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompos" ):
                return visitor.visitCompos(self)
            else:
                return visitor.visitChildren(self)




    def compos(self):

        localctx = FSharpParser.ComposContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_compos)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 374
            self.match(FSharpParser.COMPOS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSIGN(self):
            return self.getToken(FSharpParser.ASSIGN, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign" ):
                listener.enterAssign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign" ):
                listener.exitAssign(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssign" ):
                return visitor.visitAssign(self)
            else:
                return visitor.visitChildren(self)




    def assign(self):

        localctx = FSharpParser.AssignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 376
            self.match(FSharpParser.ASSIGN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(FSharpParser.TYPE, 0)

        def EQUAL(self):
            return self.getToken(FSharpParser.EQUAL, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(FSharpParser.ExpressionContext,i)


        def getRuleIndex(self):
            return FSharpParser.RULE_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType" ):
                listener.enterType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType" ):
                listener.exitType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType" ):
                return visitor.visitType(self)
            else:
                return visitor.visitChildren(self)




    def type_(self):

        localctx = FSharpParser.TypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 378
            self.match(FSharpParser.TYPE)
            self.state = 380 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 379
                    self.expression()

                else:
                    raise NoViableAltException(self)
                self.state = 382 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,17,self._ctx)

            self.state = 384
            self.match(FSharpParser.EQUAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MODULE(self):
            return self.getToken(FSharpParser.MODULE, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_module

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModule" ):
                listener.enterModule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModule" ):
                listener.exitModule(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModule" ):
                return visitor.visitModule(self)
            else:
                return visitor.visitChildren(self)




    def module(self):

        localctx = FSharpParser.ModuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_module)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 386
            self.match(FSharpParser.MODULE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OpenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN(self):
            return self.getToken(FSharpParser.OPEN, 0)

        def dotIentifier(self):
            return self.getTypedRuleContext(FSharpParser.DotIentifierContext,0)


        def getRuleIndex(self):
            return FSharpParser.RULE_open

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpen" ):
                listener.enterOpen(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpen" ):
                listener.exitOpen(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOpen" ):
                return visitor.visitOpen(self)
            else:
                return visitor.visitChildren(self)




    def open_(self):

        localctx = FSharpParser.OpenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_open)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 388
            self.match(FSharpParser.OPEN)
            self.state = 389
            self.dotIentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamespaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAMESPACE(self):
            return self.getToken(FSharpParser.NAMESPACE, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_namespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespace" ):
                listener.enterNamespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespace" ):
                listener.exitNamespace(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamespace" ):
                return visitor.visitNamespace(self)
            else:
                return visitor.visitChildren(self)




    def namespace(self):

        localctx = FSharpParser.NamespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_namespace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 391
            self.match(FSharpParser.NAMESPACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(FSharpParser.CLASS, 0)

        def END(self):
            return self.getToken(FSharpParser.END, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(FSharpParser.ExpressionContext,i)


        def getRuleIndex(self):
            return FSharpParser.RULE_class

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass" ):
                listener.enterClass(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass" ):
                listener.exitClass(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClass" ):
                return visitor.visitClass(self)
            else:
                return visitor.visitChildren(self)




    def class_(self):

        localctx = FSharpParser.ClassContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_class)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 393
            self.match(FSharpParser.CLASS)
            self.state = 395 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 394
                self.expression()
                self.state = 397 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -5782775864453234856) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 1431834722287) != 0)):
                    break

            self.state = 399
            self.match(FSharpParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DO(self):
            return self.getToken(FSharpParser.DO, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_do

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDo" ):
                listener.enterDo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDo" ):
                listener.exitDo(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDo" ):
                return visitor.visitDo(self)
            else:
                return visitor.visitChildren(self)




    def do(self):

        localctx = FSharpParser.DoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_do)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 401
            self.match(FSharpParser.DO)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(FSharpParser.NEW, 0)

        def expression(self):
            return self.getTypedRuleContext(FSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return FSharpParser.RULE_new

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNew" ):
                listener.enterNew(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNew" ):
                listener.exitNew(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNew" ):
                return visitor.visitNew(self)
            else:
                return visitor.visitChildren(self)




    def new(self):

        localctx = FSharpParser.NewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_new)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 403
            self.match(FSharpParser.NEW)
            self.state = 404
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SeqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEQ(self):
            return self.getToken(FSharpParser.SEQ, 0)

        def OPEN_BRACE(self):
            return self.getToken(FSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(FSharpParser.CLOSE_BRACE, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(FSharpParser.ExpressionContext,i)


        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(FSharpParser.SEMICOLON)
            else:
                return self.getToken(FSharpParser.SEMICOLON, i)

        def getRuleIndex(self):
            return FSharpParser.RULE_seq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSeq" ):
                listener.enterSeq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSeq" ):
                listener.exitSeq(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSeq" ):
                return visitor.visitSeq(self)
            else:
                return visitor.visitChildren(self)




    def seq(self):

        localctx = FSharpParser.SeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_seq)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 406
            self.match(FSharpParser.SEQ)
            self.state = 407
            self.match(FSharpParser.OPEN_BRACE)
            self.state = 409 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 408
                self.expression()
                self.state = 411 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -5782775864453234856) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 1431834722287) != 0)):
                    break

            self.state = 421
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==65:
                self.state = 413
                self.match(FSharpParser.SEMICOLON)
                self.state = 415 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 414
                    self.expression()
                    self.state = 417 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -5782775864453234856) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 1431834722287) != 0)):
                        break

                self.state = 423
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 424
            self.match(FSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACKET(self):
            return self.getToken(FSharpParser.OPEN_BRACKET, 0)

        def CLOSE_BRACKET(self):
            return self.getToken(FSharpParser.CLOSE_BRACKET, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(FSharpParser.ExpressionContext,i)


        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(FSharpParser.SEMICOLON)
            else:
                return self.getToken(FSharpParser.SEMICOLON, i)

        def getRuleIndex(self):
            return FSharpParser.RULE_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterList" ):
                listener.enterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitList" ):
                listener.exitList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitList" ):
                return visitor.visitList(self)
            else:
                return visitor.visitChildren(self)




    def list_(self):

        localctx = FSharpParser.ListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 426
            self.match(FSharpParser.OPEN_BRACKET)
            self.state = 428 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 427
                self.expression()
                self.state = 430 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -5782775864453234856) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 1431834722287) != 0)):
                    break

            self.state = 440
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==65:
                self.state = 432
                self.match(FSharpParser.SEMICOLON)
                self.state = 434 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 433
                    self.expression()
                    self.state = 436 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -5782775864453234856) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 1431834722287) != 0)):
                        break

                self.state = 442
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 443
            self.match(FSharpParser.CLOSE_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACKET(self):
            return self.getToken(FSharpParser.OPEN_BRACKET, 0)

        def VERTICAL_LINE(self, i:int=None):
            if i is None:
                return self.getTokens(FSharpParser.VERTICAL_LINE)
            else:
                return self.getToken(FSharpParser.VERTICAL_LINE, i)

        def CLOSE_BRACKET(self):
            return self.getToken(FSharpParser.CLOSE_BRACKET, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(FSharpParser.ExpressionContext,i)


        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(FSharpParser.SEMICOLON)
            else:
                return self.getToken(FSharpParser.SEMICOLON, i)

        def getRuleIndex(self):
            return FSharpParser.RULE_array

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray" ):
                listener.enterArray(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray" ):
                listener.exitArray(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArray" ):
                return visitor.visitArray(self)
            else:
                return visitor.visitChildren(self)




    def array(self):

        localctx = FSharpParser.ArrayContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_array)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 445
            self.match(FSharpParser.OPEN_BRACKET)
            self.state = 446
            self.match(FSharpParser.VERTICAL_LINE)
            self.state = 448 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 447
                    self.expression()

                else:
                    raise NoViableAltException(self)
                self.state = 450 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,25,self._ctx)

            self.state = 460
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==65:
                self.state = 452
                self.match(FSharpParser.SEMICOLON)
                self.state = 454 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 453
                        self.expression()

                    else:
                        raise NoViableAltException(self)
                    self.state = 456 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,26,self._ctx)

                self.state = 462
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 463
            self.match(FSharpParser.VERTICAL_LINE)
            self.state = 464
            self.match(FSharpParser.CLOSE_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MapContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAP(self):
            return self.getToken(FSharpParser.MAP, 0)

        def OPEN_BRACKET(self):
            return self.getToken(FSharpParser.OPEN_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FSharpParser.COMMA)
            else:
                return self.getToken(FSharpParser.COMMA, i)

        def CLOSE_BRACKET(self):
            return self.getToken(FSharpParser.CLOSE_BRACKET, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(FSharpParser.ExpressionContext,i)


        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(FSharpParser.SEMICOLON)
            else:
                return self.getToken(FSharpParser.SEMICOLON, i)

        def getRuleIndex(self):
            return FSharpParser.RULE_map

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMap" ):
                listener.enterMap(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMap" ):
                listener.exitMap(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMap" ):
                return visitor.visitMap(self)
            else:
                return visitor.visitChildren(self)




    def map_(self):

        localctx = FSharpParser.MapContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_map)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 466
            self.match(FSharpParser.MAP)
            self.state = 467
            self.match(FSharpParser.OPEN_BRACKET)
            self.state = 469 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 468
                self.expression()
                self.state = 471 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -5782775864453234856) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 1431834722287) != 0)):
                    break

            self.state = 473
            self.match(FSharpParser.COMMA)
            self.state = 475 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 474
                self.expression()
                self.state = 477 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -5782775864453234856) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 1431834722287) != 0)):
                    break

            self.state = 493
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==65:
                self.state = 479
                self.match(FSharpParser.SEMICOLON)
                self.state = 481 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 480
                    self.expression()
                    self.state = 483 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -5782775864453234856) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 1431834722287) != 0)):
                        break

                self.state = 485
                self.match(FSharpParser.COMMA)
                self.state = 487 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 486
                    self.expression()
                    self.state = 489 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -5782775864453234856) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 1431834722287) != 0)):
                        break

                self.state = 495
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 496
            self.match(FSharpParser.CLOSE_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GeneratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOTDOT(self, i:int=None):
            if i is None:
                return self.getTokens(FSharpParser.DOTDOT)
            else:
                return self.getToken(FSharpParser.DOTDOT, i)

        def INT(self, i:int=None):
            if i is None:
                return self.getTokens(FSharpParser.INT)
            else:
                return self.getToken(FSharpParser.INT, i)

        def FLOAT(self, i:int=None):
            if i is None:
                return self.getTokens(FSharpParser.FLOAT)
            else:
                return self.getToken(FSharpParser.FLOAT, i)

        def getRuleIndex(self):
            return FSharpParser.RULE_generator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenerator" ):
                listener.enterGenerator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenerator" ):
                listener.exitGenerator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenerator" ):
                return visitor.visitGenerator(self)
            else:
                return visitor.visitChildren(self)




    def generator(self):

        localctx = FSharpParser.GeneratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_generator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 498
            _la = self._input.LA(1)
            if not(_la==3 or _la==4):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 499
            self.match(FSharpParser.DOTDOT)
            self.state = 500
            _la = self._input.LA(1)
            if not(_la==3 or _la==4):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 503
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==62:
                self.state = 501
                self.match(FSharpParser.DOTDOT)
                self.state = 502
                _la = self._input.LA(1)
                if not(_la==3 or _la==4):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(FSharpParser.SET, 0)

        def expression(self):
            return self.getTypedRuleContext(FSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return FSharpParser.RULE_set

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet" ):
                listener.enterSet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet" ):
                listener.exitSet(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSet" ):
                return visitor.visitSet(self)
            else:
                return visitor.visitChildren(self)




    def set_(self):

        localctx = FSharpParser.SetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_set)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 505
            self.match(FSharpParser.SET)
            self.state = 506
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Async_ruleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASYNC(self):
            return self.getToken(FSharpParser.ASYNC, 0)

        def OPEN_BRACE(self):
            return self.getToken(FSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(FSharpParser.CLOSE_BRACE, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(FSharpParser.ExpressionContext,i)


        def getRuleIndex(self):
            return FSharpParser.RULE_async_rule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsync_rule" ):
                listener.enterAsync_rule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsync_rule" ):
                listener.exitAsync_rule(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAsync_rule" ):
                return visitor.visitAsync_rule(self)
            else:
                return visitor.visitChildren(self)




    def async_rule(self):

        localctx = FSharpParser.Async_ruleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_async_rule)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 508
            self.match(FSharpParser.ASYNC)
            self.state = 509
            self.match(FSharpParser.OPEN_BRACE)
            self.state = 513
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -5782775864453234856) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 1431834722287) != 0):
                self.state = 510
                self.expression()
                self.state = 515
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 516
            self.match(FSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TaskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TASK(self):
            return self.getToken(FSharpParser.TASK, 0)

        def OPEN_BRACE(self):
            return self.getToken(FSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(FSharpParser.CLOSE_BRACE, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(FSharpParser.ExpressionContext,i)


        def getRuleIndex(self):
            return FSharpParser.RULE_task

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTask" ):
                listener.enterTask(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTask" ):
                listener.exitTask(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTask" ):
                return visitor.visitTask(self)
            else:
                return visitor.visitChildren(self)




    def task(self):

        localctx = FSharpParser.TaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_task)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 518
            self.match(FSharpParser.TASK)
            self.state = 519
            self.match(FSharpParser.OPEN_BRACE)
            self.state = 523
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -5782775864453234856) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 1431834722287) != 0):
                self.state = 520
                self.expression()
                self.state = 525
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 526
            self.match(FSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Exclamation_markContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCLAMATION_MARK(self):
            return self.getToken(FSharpParser.EXCLAMATION_MARK, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_exclamation_mark

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExclamation_mark" ):
                listener.enterExclamation_mark(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExclamation_mark" ):
                listener.exitExclamation_mark(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExclamation_mark" ):
                return visitor.visitExclamation_mark(self)
            else:
                return visitor.visitChildren(self)




    def exclamation_mark(self):

        localctx = FSharpParser.Exclamation_markContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_exclamation_mark)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 528
            self.match(FSharpParser.EXCLAMATION_MARK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Match_withContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MATCH(self):
            return self.getToken(FSharpParser.MATCH, 0)

        def WITH(self):
            return self.getToken(FSharpParser.WITH, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(FSharpParser.ExpressionContext,i)


        def VERTICAL_LINE(self, i:int=None):
            if i is None:
                return self.getTokens(FSharpParser.VERTICAL_LINE)
            else:
                return self.getToken(FSharpParser.VERTICAL_LINE, i)

        def RIGHT_ARROW(self, i:int=None):
            if i is None:
                return self.getTokens(FSharpParser.RIGHT_ARROW)
            else:
                return self.getToken(FSharpParser.RIGHT_ARROW, i)

        def getRuleIndex(self):
            return FSharpParser.RULE_match_with

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatch_with" ):
                listener.enterMatch_with(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatch_with" ):
                listener.exitMatch_with(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatch_with" ):
                return visitor.visitMatch_with(self)
            else:
                return visitor.visitChildren(self)




    def match_with(self):

        localctx = FSharpParser.Match_withContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_match_with)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 530
            self.match(FSharpParser.MATCH)
            self.state = 532 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 531
                    self.expression()

                else:
                    raise NoViableAltException(self)
                self.state = 534 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,36,self._ctx)

            self.state = 536
            self.match(FSharpParser.WITH)
            self.state = 549 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 537
                    self.match(FSharpParser.VERTICAL_LINE)
                    self.state = 539 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 538
                        self.expression()
                        self.state = 541 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -5782775864453234856) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 1431834722287) != 0)):
                            break

                    self.state = 543
                    self.match(FSharpParser.RIGHT_ARROW)
                    self.state = 545 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 544
                            self.expression()

                        else:
                            raise NoViableAltException(self)
                        self.state = 547 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,38,self._ctx)


                else:
                    raise NoViableAltException(self)
                self.state = 551 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,39,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Try_with_finallyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRY(self):
            return self.getToken(FSharpParser.TRY, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(FSharpParser.ExpressionContext,i)


        def WITH(self):
            return self.getToken(FSharpParser.WITH, 0)

        def FINALLY(self):
            return self.getToken(FSharpParser.FINALLY, 0)

        def VERTICAL_LINE(self, i:int=None):
            if i is None:
                return self.getTokens(FSharpParser.VERTICAL_LINE)
            else:
                return self.getToken(FSharpParser.VERTICAL_LINE, i)

        def RIGHT_ARROW(self, i:int=None):
            if i is None:
                return self.getTokens(FSharpParser.RIGHT_ARROW)
            else:
                return self.getToken(FSharpParser.RIGHT_ARROW, i)

        def getRuleIndex(self):
            return FSharpParser.RULE_try_with_finally

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTry_with_finally" ):
                listener.enterTry_with_finally(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTry_with_finally" ):
                listener.exitTry_with_finally(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTry_with_finally" ):
                return visitor.visitTry_with_finally(self)
            else:
                return visitor.visitChildren(self)




    def try_with_finally(self):

        localctx = FSharpParser.Try_with_finallyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_try_with_finally)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 553
            self.match(FSharpParser.TRY)
            self.state = 557
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,40,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 554
                    self.expression() 
                self.state = 559
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,40,self._ctx)

            self.state = 580
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
            if la_ == 1:
                self.state = 560
                self.match(FSharpParser.WITH)
                self.state = 577
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,43,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 561
                        self.match(FSharpParser.VERTICAL_LINE)
                        self.state = 565
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while (((_la) & ~0x3f) == 0 and ((1 << _la) & -5782775864453234856) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 1431834722287) != 0):
                            self.state = 562
                            self.expression()
                            self.state = 567
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 568
                        self.match(FSharpParser.RIGHT_ARROW)
                        self.state = 572
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,42,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 569
                                self.expression() 
                            self.state = 574
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,42,self._ctx)
                 
                    self.state = 579
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,43,self._ctx)



            self.state = 584
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
            if la_ == 1:
                self.state = 582
                self.match(FSharpParser.FINALLY)
                self.state = 583
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USE(self):
            return self.getToken(FSharpParser.USE, 0)

        def EQUAL(self):
            return self.getToken(FSharpParser.EQUAL, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(FSharpParser.ExpressionContext,i)


        def getRuleIndex(self):
            return FSharpParser.RULE_use

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUse" ):
                listener.enterUse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUse" ):
                listener.exitUse(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUse" ):
                return visitor.visitUse(self)
            else:
                return visitor.visitChildren(self)




    def use(self):

        localctx = FSharpParser.UseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_use)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 586
            self.match(FSharpParser.USE)
            self.state = 590
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,46,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 587
                    self.expression() 
                self.state = 592
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,46,self._ctx)

            self.state = 593
            self.match(FSharpParser.EQUAL)
            self.state = 594
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UsingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(FSharpParser.USING, 0)

        def round_brackets(self):
            return self.getTypedRuleContext(FSharpParser.Round_bracketsContext,0)


        def expression(self):
            return self.getTypedRuleContext(FSharpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return FSharpParser.RULE_using

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsing" ):
                listener.enterUsing(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsing" ):
                listener.exitUsing(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUsing" ):
                return visitor.visitUsing(self)
            else:
                return visitor.visitChildren(self)




    def using(self):

        localctx = FSharpParser.UsingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_using)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 596
            self.match(FSharpParser.USING)
            self.state = 597
            self.round_brackets()
            self.state = 598
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RaiseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RAISE(self):
            return self.getToken(FSharpParser.RAISE, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_raise

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaise" ):
                listener.enterRaise(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaise" ):
                listener.exitRaise(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRaise" ):
                return visitor.visitRaise(self)
            else:
                return visitor.visitChildren(self)




    def raise_(self):

        localctx = FSharpParser.RaiseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_raise)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 600
            self.match(FSharpParser.RAISE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReraiseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RERAISE(self):
            return self.getToken(FSharpParser.RERAISE, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_reraise

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReraise" ):
                listener.enterReraise(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReraise" ):
                listener.exitReraise(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReraise" ):
                return visitor.visitReraise(self)
            else:
                return visitor.visitChildren(self)




    def reraise(self):

        localctx = FSharpParser.ReraiseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_reraise)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 602
            self.match(FSharpParser.RERAISE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FailwithContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FAILWITH(self):
            return self.getToken(FSharpParser.FAILWITH, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_failwith

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFailwith" ):
                listener.enterFailwith(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFailwith" ):
                listener.exitFailwith(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFailwith" ):
                return visitor.visitFailwith(self)
            else:
                return visitor.visitChildren(self)




    def failwith(self):

        localctx = FSharpParser.FailwithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_failwith)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 604
            self.match(FSharpParser.FAILWITH)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InvalidArgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INVALIDARG(self):
            return self.getToken(FSharpParser.INVALIDARG, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_invalidArg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInvalidArg" ):
                listener.enterInvalidArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInvalidArg" ):
                listener.exitInvalidArg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInvalidArg" ):
                return visitor.visitInvalidArg(self)
            else:
                return visitor.visitChildren(self)




    def invalidArg(self):

        localctx = FSharpParser.InvalidArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_invalidArg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 606
            self.match(FSharpParser.INVALIDARG)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Exception_ofContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCEPTION(self):
            return self.getToken(FSharpParser.EXCEPTION, 0)

        def OF(self):
            return self.getToken(FSharpParser.OF, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(FSharpParser.ExpressionContext,i)


        def getRuleIndex(self):
            return FSharpParser.RULE_exception_of

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterException_of" ):
                listener.enterException_of(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitException_of" ):
                listener.exitException_of(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitException_of" ):
                return visitor.visitException_of(self)
            else:
                return visitor.visitChildren(self)




    def exception_of(self):

        localctx = FSharpParser.Exception_ofContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_exception_of)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 608
            self.match(FSharpParser.EXCEPTION)
            self.state = 612
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -5782775864453234856) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 1431834722287) != 0):
                self.state = 609
                self.expression()
                self.state = 614
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 615
            self.match(FSharpParser.OF)
            self.state = 616
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MEMBER(self):
            return self.getToken(FSharpParser.MEMBER, 0)

        def dot(self):
            return self.getTypedRuleContext(FSharpParser.DotContext,0)


        def equal(self):
            return self.getTypedRuleContext(FSharpParser.EqualContext,0)


        def expression(self):
            return self.getTypedRuleContext(FSharpParser.ExpressionContext,0)


        def THIS(self):
            return self.getToken(FSharpParser.THIS, 0)

        def MISSING_ARG(self):
            return self.getToken(FSharpParser.MISSING_ARG, 0)

        def dotIentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.DotIentifierContext)
            else:
                return self.getTypedRuleContext(FSharpParser.DotIentifierContext,i)


        def getRuleIndex(self):
            return FSharpParser.RULE_member

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMember" ):
                listener.enterMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMember" ):
                listener.exitMember(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMember" ):
                return visitor.visitMember(self)
            else:
                return visitor.visitChildren(self)




    def member(self):

        localctx = FSharpParser.MemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_member)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 618
            self.match(FSharpParser.MEMBER)
            self.state = 619
            _la = self._input.LA(1)
            if not(_la==43 or _la==69):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 620
            self.dot()
            self.state = 622 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 621
                self.dotIentifier()
                self.state = 624 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==106):
                    break

            self.state = 626
            self.equal()
            self.state = 627
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAL(self):
            return self.getToken(FSharpParser.VAL, 0)

        def dotIentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.DotIentifierContext)
            else:
                return self.getTypedRuleContext(FSharpParser.DotIentifierContext,i)


        def COLON(self):
            return self.getToken(FSharpParser.COLON, 0)

        def mutable(self):
            return self.getTypedRuleContext(FSharpParser.MutableContext,0)


        def internal(self):
            return self.getTypedRuleContext(FSharpParser.InternalContext,0)


        def public(self):
            return self.getTypedRuleContext(FSharpParser.PublicContext,0)


        def private(self):
            return self.getTypedRuleContext(FSharpParser.PrivateContext,0)


        def getRuleIndex(self):
            return FSharpParser.RULE_val

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVal" ):
                listener.enterVal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVal" ):
                listener.exitVal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVal" ):
                return visitor.visitVal(self)
            else:
                return visitor.visitChildren(self)




    def val(self):

        localctx = FSharpParser.ValContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_val)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 629
            self.match(FSharpParser.VAL)
            self.state = 631
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14:
                self.state = 630
                self.mutable()


            self.state = 636
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [13]:
                self.state = 633
                self.internal()
                pass
            elif token in [11]:
                self.state = 634
                self.public()
                pass
            elif token in [12]:
                self.state = 635
                self.private()
                pass
            elif token in [106]:
                pass
            else:
                pass
            self.state = 638
            self.dotIentifier()
            self.state = 639
            self.match(FSharpParser.COLON)
            self.state = 640
            self.dotIentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRUCT(self):
            return self.getToken(FSharpParser.STRUCT, 0)

        def END(self):
            return self.getToken(FSharpParser.END, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(FSharpParser.ExpressionContext,i)


        def getRuleIndex(self):
            return FSharpParser.RULE_struct

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct" ):
                listener.enterStruct(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct" ):
                listener.exitStruct(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStruct" ):
                return visitor.visitStruct(self)
            else:
                return visitor.visitChildren(self)




    def struct(self):

        localctx = FSharpParser.StructContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_struct)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 642
            self.match(FSharpParser.STRUCT)
            self.state = 646
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -5782775864453234856) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 1431834722287) != 0):
                self.state = 643
                self.expression()
                self.state = 648
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 649
            self.match(FSharpParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_get_setContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(FSharpParser.WITH, 0)

        def GET(self):
            return self.getToken(FSharpParser.GET, 0)

        def UNIT(self):
            return self.getToken(FSharpParser.UNIT, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(FSharpParser.EQUAL)
            else:
                return self.getToken(FSharpParser.EQUAL, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(FSharpParser.ExpressionContext,i)


        def AND(self):
            return self.getToken(FSharpParser.AND, 0)

        def private(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.PrivateContext)
            else:
                return self.getTypedRuleContext(FSharpParser.PrivateContext,i)


        def internal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.InternalContext)
            else:
                return self.getTypedRuleContext(FSharpParser.InternalContext,i)


        def public(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.PublicContext)
            else:
                return self.getTypedRuleContext(FSharpParser.PublicContext,i)


        def SET(self):
            return self.getToken(FSharpParser.SET, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_with_get_set

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_get_set" ):
                listener.enterWith_get_set(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_get_set" ):
                listener.exitWith_get_set(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_get_set" ):
                return visitor.visitWith_get_set(self)
            else:
                return visitor.visitChildren(self)




    def with_get_set(self):

        localctx = FSharpParser.With_get_setContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_with_get_set)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 693
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                self.state = 651
                self.match(FSharpParser.WITH)

                self.state = 655
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [12]:
                    self.state = 652
                    self.private()
                    pass
                elif token in [13]:
                    self.state = 653
                    self.internal()
                    pass
                elif token in [11]:
                    self.state = 654
                    self.public()
                    pass
                elif token in [33]:
                    pass
                else:
                    pass
                self.state = 657
                self.match(FSharpParser.GET)
                self.state = 658
                self.match(FSharpParser.UNIT)
                self.state = 659
                self.match(FSharpParser.EQUAL)
                self.state = 660
                self.expression()

                self.state = 662
                self.match(FSharpParser.AND)
                self.state = 677
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
                if la_ == 1:
                    self.state = 666
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [12]:
                        self.state = 663
                        self.private()
                        pass
                    elif token in [13]:
                        self.state = 664
                        self.internal()
                        pass
                    elif token in [11]:
                        self.state = 665
                        self.public()
                        pass
                    elif token in [47]:
                        pass
                    else:
                        pass
                    self.state = 668
                    self.match(FSharpParser.SET)
                    self.state = 672
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,54,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 669
                            self.expression() 
                        self.state = 674
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,54,self._ctx)

                    self.state = 675
                    self.match(FSharpParser.EQUAL)
                    self.state = 676
                    self.expression()


                pass

            elif la_ == 2:
                self.state = 679
                self.match(FSharpParser.WITH)
                self.state = 683
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
                if la_ == 1:
                    self.state = 680
                    self.private()

                elif la_ == 2:
                    self.state = 681
                    self.internal()

                elif la_ == 3:
                    self.state = 682
                    self.public()


                self.state = 688
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,57,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 685
                        self.expression() 
                    self.state = 690
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,57,self._ctx)

                self.state = 691
                self.match(FSharpParser.EQUAL)
                self.state = 692
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TupleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(FSharpParser.OPEN_PAREN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(FSharpParser.ExpressionContext,i)


        def CLOSE_PAREN(self):
            return self.getToken(FSharpParser.CLOSE_PAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(FSharpParser.COMMA)
            else:
                return self.getToken(FSharpParser.COMMA, i)

        def getRuleIndex(self):
            return FSharpParser.RULE_tuple

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTuple" ):
                listener.enterTuple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTuple" ):
                listener.exitTuple(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTuple" ):
                return visitor.visitTuple(self)
            else:
                return visitor.visitChildren(self)




    def tuple_(self):

        localctx = FSharpParser.TupleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_tuple)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 695
            self.match(FSharpParser.OPEN_PAREN)
            self.state = 696
            self.expression()
            self.state = 699 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 697
                self.match(FSharpParser.COMMA)
                self.state = 698
                self.expression()
                self.state = 701 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==64):
                    break

            self.state = 703
            self.match(FSharpParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(FSharpParser.WITH, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_with

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith" ):
                listener.enterWith(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith" ):
                listener.exitWith(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith" ):
                return visitor.visitWith(self)
            else:
                return visitor.visitChildren(self)




    def with_(self):

        localctx = FSharpParser.WithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_with)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 705
            self.match(FSharpParser.WITH)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(FSharpParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(FSharpParser.CLOSE_BRACE, 0)

        def with_(self):
            return self.getTypedRuleContext(FSharpParser.WithContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(FSharpParser.ExpressionContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(FSharpParser.COLON)
            else:
                return self.getToken(FSharpParser.COLON, i)

        def dotIentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.DotIentifierContext)
            else:
                return self.getTypedRuleContext(FSharpParser.DotIentifierContext,i)


        def getRuleIndex(self):
            return FSharpParser.RULE_record

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecord" ):
                listener.enterRecord(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecord" ):
                listener.exitRecord(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecord" ):
                return visitor.visitRecord(self)
            else:
                return visitor.visitChildren(self)




    def record(self):

        localctx = FSharpParser.RecordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_record)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 707
            self.match(FSharpParser.OPEN_BRACE)
            self.state = 730
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                self.state = 714
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & -5782775864453234856) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 1431834722287) != 0):
                    self.state = 708
                    self.expression()
                    self.state = 709
                    self.match(FSharpParser.COLON)
                    self.state = 710
                    self.dotIentifier()
                    self.state = 716
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 720
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,61,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 717
                        self.expression() 
                    self.state = 722
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,61,self._ctx)

                self.state = 723
                self.with_()
                self.state = 727
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & -5782775864453234856) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 1431834722287) != 0):
                    self.state = 724
                    self.expression()
                    self.state = 729
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 732
            self.match(FSharpParser.CLOSE_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OfContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OF(self):
            return self.getToken(FSharpParser.OF, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_of

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOf" ):
                listener.enterOf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOf" ):
                listener.exitOf(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOf" ):
                return visitor.visitOf(self)
            else:
                return visitor.visitChildren(self)




    def of(self):

        localctx = FSharpParser.OfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_of)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 734
            self.match(FSharpParser.OF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VERTICAL_LINE(self, i:int=None):
            if i is None:
                return self.getTokens(FSharpParser.VERTICAL_LINE)
            else:
                return self.getToken(FSharpParser.VERTICAL_LINE, i)

        def dotIentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.DotIentifierContext)
            else:
                return self.getTypedRuleContext(FSharpParser.DotIentifierContext,i)


        def equal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.EqualContext)
            else:
                return self.getTypedRuleContext(FSharpParser.EqualContext,i)


        def of(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.OfContext)
            else:
                return self.getTypedRuleContext(FSharpParser.OfContext,i)


        def getRuleIndex(self):
            return FSharpParser.RULE_enum

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum" ):
                listener.enterEnum(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum" ):
                listener.exitEnum(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnum" ):
                return visitor.visitEnum(self)
            else:
                return visitor.visitChildren(self)




    def enum(self):

        localctx = FSharpParser.EnumContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_enum)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 744 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 736
                    self.match(FSharpParser.VERTICAL_LINE)
                    self.state = 737
                    self.dotIentifier()
                    self.state = 740
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [78]:
                        self.state = 738
                        self.equal()
                        pass
                    elif token in [60]:
                        self.state = 739
                        self.of()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 742
                    self.dotIentifier()

                else:
                    raise NoViableAltException(self)
                self.state = 746 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,65,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InheritContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INHERIT(self):
            return self.getToken(FSharpParser.INHERIT, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_inherit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInherit" ):
                listener.enterInherit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInherit" ):
                listener.exitInherit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInherit" ):
                return visitor.visitInherit(self)
            else:
                return visitor.visitChildren(self)




    def inherit(self):

        localctx = FSharpParser.InheritContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_inherit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 748
            self.match(FSharpParser.INHERIT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(FSharpParser.DEFAULT, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_default

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault" ):
                listener.enterDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault" ):
                listener.exitDefault(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefault" ):
                return visitor.visitDefault(self)
            else:
                return visitor.visitChildren(self)




    def default(self):

        localctx = FSharpParser.DefaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_default)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 750
            self.match(FSharpParser.DEFAULT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OverrideContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OVERRIDE(self):
            return self.getToken(FSharpParser.OVERRIDE, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_override

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOverride" ):
                listener.enterOverride(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOverride" ):
                listener.exitOverride(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOverride" ):
                return visitor.visitOverride(self)
            else:
                return visitor.visitChildren(self)




    def override(self):

        localctx = FSharpParser.OverrideContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_override)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 752
            self.match(FSharpParser.OVERRIDE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AbstractContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABSTRACT(self):
            return self.getToken(FSharpParser.ABSTRACT, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_abstract

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbstract" ):
                listener.enterAbstract(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbstract" ):
                listener.exitAbstract(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAbstract" ):
                return visitor.visitAbstract(self)
            else:
                return visitor.visitChildren(self)




    def abstract(self):

        localctx = FSharpParser.AbstractContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_abstract)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 754
            self.match(FSharpParser.ABSTRACT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BASE(self):
            return self.getToken(FSharpParser.BASE, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_base

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBase" ):
                listener.enterBase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBase" ):
                listener.exitBase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBase" ):
                return visitor.visitBase(self)
            else:
                return visitor.visitChildren(self)




    def base(self):

        localctx = FSharpParser.BaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_base)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 756
            self.match(FSharpParser.BASE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Colon_qContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON_Q(self):
            return self.getToken(FSharpParser.COLON_Q, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_colon_q

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColon_q" ):
                listener.enterColon_q(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColon_q" ):
                listener.exitColon_q(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColon_q" ):
                return visitor.visitColon_q(self)
            else:
                return visitor.visitChildren(self)




    def colon_q(self):

        localctx = FSharpParser.Colon_qContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_colon_q)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 758
            self.match(FSharpParser.COLON_Q)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERFACE(self):
            return self.getToken(FSharpParser.INTERFACE, 0)

        def getRuleIndex(self):
            return FSharpParser.RULE_interface

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface" ):
                listener.enterInterface(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface" ):
                listener.exitInterface(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterface" ):
                return visitor.visitInterface(self)
            else:
                return visitor.visitChildren(self)




    def interface(self):

        localctx = FSharpParser.InterfaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_interface)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 760
            self.match(FSharpParser.INTERFACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotIentifier(self):
            return self.getTypedRuleContext(FSharpParser.DotIentifierContext,0)


        def dot(self):
            return self.getTypedRuleContext(FSharpParser.DotContext,0)


        def int_(self):
            return self.getTypedRuleContext(FSharpParser.IntContext,0)


        def float_(self):
            return self.getTypedRuleContext(FSharpParser.FloatContext,0)


        def bool_(self):
            return self.getTypedRuleContext(FSharpParser.BoolContext,0)


        def char(self):
            return self.getTypedRuleContext(FSharpParser.CharContext,0)


        def unit(self):
            return self.getTypedRuleContext(FSharpParser.UnitContext,0)


        def missing_arg(self):
            return self.getTypedRuleContext(FSharpParser.Missing_argContext,0)


        def string(self):
            return self.getTypedRuleContext(FSharpParser.StringContext,0)


        def attribute(self):
            return self.getTypedRuleContext(FSharpParser.AttributeContext,0)


        def let(self):
            return self.getTypedRuleContext(FSharpParser.LetContext,0)


        def round_brackets(self):
            return self.getTypedRuleContext(FSharpParser.Round_bracketsContext,0)


        def rec(self):
            return self.getTypedRuleContext(FSharpParser.RecContext,0)


        def public(self):
            return self.getTypedRuleContext(FSharpParser.PublicContext,0)


        def private(self):
            return self.getTypedRuleContext(FSharpParser.PrivateContext,0)


        def internal(self):
            return self.getTypedRuleContext(FSharpParser.InternalContext,0)


        def mutable(self):
            return self.getTypedRuleContext(FSharpParser.MutableContext,0)


        def fun(self):
            return self.getTypedRuleContext(FSharpParser.FunContext,0)


        def typezation(self):
            return self.getTypedRuleContext(FSharpParser.TypezationContext,0)


        def if_then_elif_else(self):
            return self.getTypedRuleContext(FSharpParser.If_then_elif_elseContext,0)


        def while_do(self):
            return self.getTypedRuleContext(FSharpParser.While_doContext,0)


        def for_(self):
            return self.getTypedRuleContext(FSharpParser.ForContext,0)


        def add(self):
            return self.getTypedRuleContext(FSharpParser.AddContext,0)


        def mul(self):
            return self.getTypedRuleContext(FSharpParser.MulContext,0)


        def div(self):
            return self.getTypedRuleContext(FSharpParser.DivContext,0)


        def minus(self):
            return self.getTypedRuleContext(FSharpParser.MinusContext,0)


        def pow_(self):
            return self.getTypedRuleContext(FSharpParser.PowContext,0)


        def mod(self):
            return self.getTypedRuleContext(FSharpParser.ModContext,0)


        def not_equal(self):
            return self.getTypedRuleContext(FSharpParser.Not_equalContext,0)


        def less(self):
            return self.getTypedRuleContext(FSharpParser.LessContext,0)


        def less_equal(self):
            return self.getTypedRuleContext(FSharpParser.Less_equalContext,0)


        def greater(self):
            return self.getTypedRuleContext(FSharpParser.GreaterContext,0)


        def greater_equal(self):
            return self.getTypedRuleContext(FSharpParser.Greater_equalContext,0)


        def equal(self):
            return self.getTypedRuleContext(FSharpParser.EqualContext,0)


        def and_(self):
            return self.getTypedRuleContext(FSharpParser.AndContext,0)


        def or_(self):
            return self.getTypedRuleContext(FSharpParser.OrContext,0)


        def lshift(self):
            return self.getTypedRuleContext(FSharpParser.LshiftContext,0)


        def rshift(self):
            return self.getTypedRuleContext(FSharpParser.RshiftContext,0)


        def log_mul(self):
            return self.getTypedRuleContext(FSharpParser.Log_mulContext,0)


        def log_add(self):
            return self.getTypedRuleContext(FSharpParser.Log_addContext,0)


        def log_xor(self):
            return self.getTypedRuleContext(FSharpParser.Log_xorContext,0)


        def log_not(self):
            return self.getTypedRuleContext(FSharpParser.Log_notContext,0)


        def not_(self):
            return self.getTypedRuleContext(FSharpParser.NotContext,0)


        def pipe(self):
            return self.getTypedRuleContext(FSharpParser.PipeContext,0)


        def compos(self):
            return self.getTypedRuleContext(FSharpParser.ComposContext,0)


        def assign(self):
            return self.getTypedRuleContext(FSharpParser.AssignContext,0)


        def fun_type(self):
            return self.getTypedRuleContext(FSharpParser.Fun_typeContext,0)


        def type_(self):
            return self.getTypedRuleContext(FSharpParser.TypeContext,0)


        def module(self):
            return self.getTypedRuleContext(FSharpParser.ModuleContext,0)


        def open_(self):
            return self.getTypedRuleContext(FSharpParser.OpenContext,0)


        def namespace(self):
            return self.getTypedRuleContext(FSharpParser.NamespaceContext,0)


        def class_(self):
            return self.getTypedRuleContext(FSharpParser.ClassContext,0)


        def do(self):
            return self.getTypedRuleContext(FSharpParser.DoContext,0)


        def new(self):
            return self.getTypedRuleContext(FSharpParser.NewContext,0)


        def seq(self):
            return self.getTypedRuleContext(FSharpParser.SeqContext,0)


        def generator(self):
            return self.getTypedRuleContext(FSharpParser.GeneratorContext,0)


        def list_(self):
            return self.getTypedRuleContext(FSharpParser.ListContext,0)


        def array(self):
            return self.getTypedRuleContext(FSharpParser.ArrayContext,0)


        def map_(self):
            return self.getTypedRuleContext(FSharpParser.MapContext,0)


        def async_rule(self):
            return self.getTypedRuleContext(FSharpParser.Async_ruleContext,0)


        def task(self):
            return self.getTypedRuleContext(FSharpParser.TaskContext,0)


        def exclamation_mark(self):
            return self.getTypedRuleContext(FSharpParser.Exclamation_markContext,0)


        def match_with(self):
            return self.getTypedRuleContext(FSharpParser.Match_withContext,0)


        def try_with_finally(self):
            return self.getTypedRuleContext(FSharpParser.Try_with_finallyContext,0)


        def use(self):
            return self.getTypedRuleContext(FSharpParser.UseContext,0)


        def using(self):
            return self.getTypedRuleContext(FSharpParser.UsingContext,0)


        def raise_(self):
            return self.getTypedRuleContext(FSharpParser.RaiseContext,0)


        def reraise(self):
            return self.getTypedRuleContext(FSharpParser.ReraiseContext,0)


        def failwith(self):
            return self.getTypedRuleContext(FSharpParser.FailwithContext,0)


        def invalidArg(self):
            return self.getTypedRuleContext(FSharpParser.InvalidArgContext,0)


        def exception_of(self):
            return self.getTypedRuleContext(FSharpParser.Exception_ofContext,0)


        def member(self):
            return self.getTypedRuleContext(FSharpParser.MemberContext,0)


        def val(self):
            return self.getTypedRuleContext(FSharpParser.ValContext,0)


        def struct(self):
            return self.getTypedRuleContext(FSharpParser.StructContext,0)


        def with_get_set(self):
            return self.getTypedRuleContext(FSharpParser.With_get_setContext,0)


        def tuple_(self):
            return self.getTypedRuleContext(FSharpParser.TupleContext,0)


        def with_(self):
            return self.getTypedRuleContext(FSharpParser.WithContext,0)


        def record(self):
            return self.getTypedRuleContext(FSharpParser.RecordContext,0)


        def enum(self):
            return self.getTypedRuleContext(FSharpParser.EnumContext,0)


        def inherit(self):
            return self.getTypedRuleContext(FSharpParser.InheritContext,0)


        def default(self):
            return self.getTypedRuleContext(FSharpParser.DefaultContext,0)


        def override(self):
            return self.getTypedRuleContext(FSharpParser.OverrideContext,0)


        def abstract(self):
            return self.getTypedRuleContext(FSharpParser.AbstractContext,0)


        def base(self):
            return self.getTypedRuleContext(FSharpParser.BaseContext,0)


        def colon_q(self):
            return self.getTypedRuleContext(FSharpParser.Colon_qContext,0)


        def interface(self):
            return self.getTypedRuleContext(FSharpParser.InterfaceContext,0)


        def getRuleIndex(self):
            return FSharpParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)




    def expression(self):

        localctx = FSharpParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_expression)
        try:
            self.state = 848
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 762
                self.dotIentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 763
                self.dot()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 764
                self.int_()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 765
                self.float_()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 766
                self.bool_()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 767
                self.char()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 768
                self.unit()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 769
                self.missing_arg()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 770
                self.string()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 771
                self.attribute()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 772
                self.let()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 773
                self.round_brackets()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 774
                self.rec()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 775
                self.public()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 776
                self.private()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 777
                self.internal()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 778
                self.mutable()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 779
                self.fun()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 780
                self.typezation()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 781
                self.if_then_elif_else()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 782
                self.while_do()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 783
                self.for_()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 784
                self.add()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 785
                self.mul()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 786
                self.div()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 787
                self.minus()
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 788
                self.pow_()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 789
                self.mod()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 790
                self.not_equal()
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 791
                self.less()
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 792
                self.less_equal()
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 793
                self.greater()
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 794
                self.greater_equal()
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 795
                self.equal()
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 796
                self.and_()
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 797
                self.or_()
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 798
                self.lshift()
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 799
                self.rshift()
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 800
                self.log_mul()
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 801
                self.log_add()
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 802
                self.log_xor()
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 803
                self.log_not()
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 804
                self.not_()
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 805
                self.pipe()
                pass

            elif la_ == 45:
                self.enterOuterAlt(localctx, 45)
                self.state = 806
                self.compos()
                pass

            elif la_ == 46:
                self.enterOuterAlt(localctx, 46)
                self.state = 807
                self.assign()
                pass

            elif la_ == 47:
                self.enterOuterAlt(localctx, 47)
                self.state = 808
                self.fun_type()
                pass

            elif la_ == 48:
                self.enterOuterAlt(localctx, 48)
                self.state = 809
                self.type_()
                pass

            elif la_ == 49:
                self.enterOuterAlt(localctx, 49)
                self.state = 810
                self.module()
                pass

            elif la_ == 50:
                self.enterOuterAlt(localctx, 50)
                self.state = 811
                self.open_()
                pass

            elif la_ == 51:
                self.enterOuterAlt(localctx, 51)
                self.state = 812
                self.namespace()
                pass

            elif la_ == 52:
                self.enterOuterAlt(localctx, 52)
                self.state = 813
                self.class_()
                pass

            elif la_ == 53:
                self.enterOuterAlt(localctx, 53)
                self.state = 814
                self.do()
                pass

            elif la_ == 54:
                self.enterOuterAlt(localctx, 54)
                self.state = 815
                self.new()
                pass

            elif la_ == 55:
                self.enterOuterAlt(localctx, 55)
                self.state = 816
                self.seq()
                pass

            elif la_ == 56:
                self.enterOuterAlt(localctx, 56)
                self.state = 817
                self.generator()
                pass

            elif la_ == 57:
                self.enterOuterAlt(localctx, 57)
                self.state = 818
                self.list_()
                pass

            elif la_ == 58:
                self.enterOuterAlt(localctx, 58)
                self.state = 819
                self.array()
                pass

            elif la_ == 59:
                self.enterOuterAlt(localctx, 59)
                self.state = 820
                self.map_()
                pass

            elif la_ == 60:
                self.enterOuterAlt(localctx, 60)
                self.state = 821
                self.async_rule()
                pass

            elif la_ == 61:
                self.enterOuterAlt(localctx, 61)
                self.state = 822
                self.task()
                pass

            elif la_ == 62:
                self.enterOuterAlt(localctx, 62)
                self.state = 823
                self.exclamation_mark()
                pass

            elif la_ == 63:
                self.enterOuterAlt(localctx, 63)
                self.state = 824
                self.match_with()
                pass

            elif la_ == 64:
                self.enterOuterAlt(localctx, 64)
                self.state = 825
                self.try_with_finally()
                pass

            elif la_ == 65:
                self.enterOuterAlt(localctx, 65)
                self.state = 826
                self.use()
                pass

            elif la_ == 66:
                self.enterOuterAlt(localctx, 66)
                self.state = 827
                self.using()
                pass

            elif la_ == 67:
                self.enterOuterAlt(localctx, 67)
                self.state = 828
                self.raise_()
                pass

            elif la_ == 68:
                self.enterOuterAlt(localctx, 68)
                self.state = 829
                self.reraise()
                pass

            elif la_ == 69:
                self.enterOuterAlt(localctx, 69)
                self.state = 830
                self.failwith()
                pass

            elif la_ == 70:
                self.enterOuterAlt(localctx, 70)
                self.state = 831
                self.invalidArg()
                pass

            elif la_ == 71:
                self.enterOuterAlt(localctx, 71)
                self.state = 832
                self.exception_of()
                pass

            elif la_ == 72:
                self.enterOuterAlt(localctx, 72)
                self.state = 833
                self.member()
                pass

            elif la_ == 73:
                self.enterOuterAlt(localctx, 73)
                self.state = 834
                self.val()
                pass

            elif la_ == 74:
                self.enterOuterAlt(localctx, 74)
                self.state = 835
                self.struct()
                pass

            elif la_ == 75:
                self.enterOuterAlt(localctx, 75)
                self.state = 836
                self.with_get_set()
                pass

            elif la_ == 76:
                self.enterOuterAlt(localctx, 76)
                self.state = 837
                self.tuple_()
                pass

            elif la_ == 77:
                self.enterOuterAlt(localctx, 77)
                self.state = 838
                self.with_()
                pass

            elif la_ == 78:
                self.enterOuterAlt(localctx, 78)
                self.state = 839
                self.record()
                pass

            elif la_ == 79:
                self.enterOuterAlt(localctx, 79)
                self.state = 840
                self.enum()
                pass

            elif la_ == 80:
                self.enterOuterAlt(localctx, 80)
                self.state = 841
                self.inherit()
                pass

            elif la_ == 81:
                self.enterOuterAlt(localctx, 81)
                self.state = 842
                self.default()
                pass

            elif la_ == 82:
                self.enterOuterAlt(localctx, 82)
                self.state = 843
                self.override()
                pass

            elif la_ == 83:
                self.enterOuterAlt(localctx, 83)
                self.state = 844
                self.abstract()
                pass

            elif la_ == 84:
                self.enterOuterAlt(localctx, 84)
                self.state = 845
                self.base()
                pass

            elif la_ == 85:
                self.enterOuterAlt(localctx, 85)
                self.state = 846
                self.colon_q()
                pass

            elif la_ == 86:
                self.enterOuterAlt(localctx, 86)
                self.state = 847
                self.interface()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(FSharpParser.EOF, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FSharpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(FSharpParser.ExpressionContext,i)


        def getRuleIndex(self):
            return FSharpParser.RULE_exprs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprs" ):
                listener.enterExprs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprs" ):
                listener.exitExprs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExprs" ):
                return visitor.visitExprs(self)
            else:
                return visitor.visitChildren(self)




    def exprs(self):

        localctx = FSharpParser.ExprsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_exprs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 853
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -5782775864453234856) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 1431834722287) != 0):
                self.state = 850
                self.expression()
                self.state = 855
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 856
            self.match(FSharpParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





